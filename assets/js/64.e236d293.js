(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{421:function(t,e,a){"use strict";a.r(e);var s=a(7),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"introduction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),e("p",[t._v("To send people BTC - we simply scan a QR Code "),e("em",[t._v("(or paste an address)")]),t._v(", enter some amount and "),e("em",[t._v("whoosh")]),t._v(" - sent!\nUsers might think, just like traditional currency, we can only exchange money using Bitcoin.\nAs it so happens, the underlying technology Bitcoin supports specify outputs not as addresses, but as programming scripts.\nThis opens us to a world of possibilities using Bitcoin.")]),t._v(" "),e("h2",{attrs:{id:"script"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#script"}},[t._v("#")]),t._v(" Script")]),t._v(" "),e("p",[t._v("Bitcoin supports "),e("a",{attrs:{href:"https://en.bitcoin.it/wiki/Script",target:"_blank",rel:"noopener noreferrer"}},[t._v("Script"),e("OutboundLink")],1),t._v(", a "),e("strong",[t._v("stack-based")]),t._v(" lightweight programming language.\nAny script written in "),e("strong",[t._v("Script")]),t._v(" "),e("em",[t._v("(pun intended)")]),t._v(" contains "),e("code",[t._v("OP_*")]),t._v(" codes and raw byte arrays that Bitcoin Full Nodes understand and process.\nCurrently, there are "),e("code",[t._v("117")]),t._v(" op-codes in use.\nYou can read more about these op-codes straight "),e("a",{attrs:{href:"https://en.bitcoin.it/wiki/Script",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("Script is intentionally left "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Turing_completeness",target:"_blank",rel:"noopener noreferrer"}},[t._v("Turing incomplete"),e("OutboundLink")],1),t._v(" which is why there is no "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Halting_problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("halting problem"),e("OutboundLink")],1),t._v(" with scripts.\nThere are no loops and overall, it's a very constrained programming language.")]),t._v(" "),e("p",[t._v("A transaction is considered valid only when the Script returns "),e("code",[t._v("true")]),t._v(" at the end of execution.\nOutput Script (aka scriptpubkey) define the conditions under which coins associated with them can be spent. To spend a particular coin implies finding an input script (aka scriptsig) such that a script made out of concatenation of "),e("code",[t._v("scriptsig + scriptpubkey")]),t._v(" evaluates to "),e("code",[t._v("true")]),t._v(".")]),t._v(" "),e("p",[t._v("For example, a basic legacy "),e("code",[t._v("Pay-to-PubKey-Hash")]),t._v(" transaction would look like:")]),t._v(" "),e("div",{staticClass:"language-script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("scriptPubKey: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\nscriptSig: <sig> <pubKey>\n")])])]),e("h4",{attrs:{id:"examples-of-things-achievable-using-bitcoin-script"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples-of-things-achievable-using-bitcoin-script"}},[t._v("#")]),t._v(" Examples of things achievable using Bitcoin Script:")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("Pay Someone (p2pkh/p2wpkh)")]),t._v(" - A specific public key must sign to spend the coins.")]),t._v(" "),e("li",[e("code",[t._v("Escrow (2-of-3-multisig)")]),t._v(" - Two parties need to sign together to spend the coins.")]),t._v(" "),e("li",[e("code",[t._v("Vault (locked)")]),t._v(" - A specific key will not be able to spend the coins until a timeout but another master key will always be able to spend them.")]),t._v(" "),e("li",[e("code",[t._v("HTLC")]),t._v(" - The receiver needs disclose a secret before a timeout, else the coins are transferred back to the payee.")])]),t._v(" "),e("h4",{attrs:{id:"motivation-for-policies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#motivation-for-policies"}},[t._v("#")]),t._v(" Motivation for Policies")]),t._v(" "),e("p",[t._v("Unfortunately, due to its low-level and unusual stack-based nature, Script is pretty hard to reason about and use.\nDespite being around since Bitcoin's creation, writing and understanding Script is not trivial.\nThis is why the scripts for the above few examples are pretty lengthy and might not make sense at the first glance.\nWhen writing a script, we would want to know that if the logic we wrote is "),e("strong",[t._v("correct")]),t._v(", "),e("strong",[t._v("optimal")]),t._v(" and "),e("strong",[t._v("efficient in size")]),t._v(" (use lower "),e("a",{attrs:{href:"https://en.bitcoin.it/wiki/Weight_units",target:"_blank",rel:"noopener noreferrer"}},[t._v("weight"),e("OutboundLink")],1),t._v(").")]),t._v(" "),e("p",[t._v("The community wanted an easy alternative way of writing Script that would create the most optimized Script code.\nThis gave rise to "),e("strong",[t._v("Miniscript")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"miniscript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#miniscript"}},[t._v("#")]),t._v(" Miniscript")]),t._v(" "),e("p",[e("a",{attrs:{href:"http://bitcoin.sipa.be/miniscript/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Miniscript"),e("OutboundLink")],1),t._v(" tackles the above problems head-on.\nIt is an expressive way to create policies on Bitcoin Scripts in a structured and simple fashion.\nUsing Miniscript, it's difficult to go wrong.")]),t._v(" "),e("p",[t._v("Another very important goal of Miniscript is to replace any key used in a policy with another policy.\nThis is important because people might have multiple keys and complicated timelocks in their existing setup.\nWhile signing a new policy, they would want to use their existing setup to also generate addresses for this new setup.\nThis is accomplished using something called "),e("strong",[t._v("Output Descriptors")]),t._v(" which we will get into in next section.")]),t._v(" "),e("p",[t._v("Miniscript compiler compiles a "),e("strong",[t._v("spending policy")]),t._v(" down to Miniscript.\nIt doesn't contain any signature, it's mainly a combinator language for designing spending conditions.\nYou can try out the compiler online by using "),e("a",{attrs:{href:"http://bitcoin.sipa.be/miniscript/#:~:text=Policy%20to%20Miniscript%20compiler",target:"_blank",rel:"noopener noreferrer"}},[t._v("this link"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h4",{attrs:{id:"fragments"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fragments"}},[t._v("#")]),t._v(" Fragments")]),t._v(" "),e("p",[t._v("Here are some fragments which can be combined to create powerful expressions.")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("pk(key)")]),t._v(" - Specifies a given public key")]),t._v(" "),e("li",[e("code",[t._v("thresh(k, expr_1, expr_2, ..., expr_n)")]),t._v(" - Specifies k of n multisig using expressions.")]),t._v(" "),e("li",[e("code",[t._v("older(T)")]),t._v(" - Timelock for T blocks")]),t._v(" "),e("li",[e("code",[t._v("and(expr_1, expr_2)")]),t._v(" - Both expressions should evaluate to true.")]),t._v(" "),e("li",[e("code",[t._v("or(expr_1, expr_2)")]),t._v(" - Any one of the expressions should evaluate to true.")]),t._v(" "),e("li",[e("code",[t._v("aor(expr_1, expr_2)")]),t._v(" - Similar to "),e("code",[t._v("or")]),t._v(" but "),e("code",[t._v("expr_1")]),t._v(" has a more probability to evaluate to true.")])]),t._v(" "),e("p",[t._v("Bitcoin Script allows us to use another alternate stack. The combinator functions use this second stack to evaluate expressions of "),e("code",[t._v("thresh")]),t._v(", "),e("code",[t._v("and")]),t._v(", "),e("code",[t._v("aor")]),t._v(" and "),e("code",[t._v("or")]),t._v(".\nThe complete Miniscript Reference can be found "),e("a",{attrs:{href:"http://bitcoin.sipa.be/miniscript/#:~:text=Miniscript%20reference",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h4",{attrs:{id:"example-policies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-policies"}},[t._v("#")]),t._v(" Example Policies")]),t._v(" "),e("p",[t._v("Here are the Miniscript Policies for the examples we looked at earlier.\nNote "),e("code",[t._v("A")]),t._v(", "),e("code",[t._v("B")]),t._v(", "),e("code",[t._v("C")]),t._v(" are placeholders for keys "),e("em",[t._v("("),e("code",[t._v("xpub")]),t._v("/"),e("code",[t._v("xprv")]),t._v(")")]),t._v(" involved in the tx.\nDescriptors are high level description of scriptpubkey (p2pkh, p2sh etc).\nAnd miniscripts are semantics that describes the actual redeemscript.\nIn general you have Descriptor(Miniscript) format.")]),t._v(" "),e("ol",[e("li",[t._v("Pay A (pay-to-public-key)")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pk(A)\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("Escrow Account between A, B and third-party C.")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("thresh(2,pk(A),pk(B),pk(C))\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("Vault for A time-locked for T blocks with B as the master key.")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("aor(and(pk(A),time(T)),pk(B))\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[t._v("HTLC payment to B, which, if unspent for T blocks, returns to A.")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("aor(and(pk(A),time(T)),and(pk(B),hash(H))))\n")])])]),e("p",[t._v("The Miniscript Policy Compiler is written in Rust and is present in "),e("a",{attrs:{href:"https://github.com/rust-bitcoin/rust-miniscript",target:"_blank",rel:"noopener noreferrer"}},[t._v("this repository"),e("OutboundLink")],1),t._v(".\nIn this blog, we will later use the same using "),e("a",{attrs:{href:"https://github.com/bitcoindevkit/bdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("bitcoindevkit/bdk"),e("OutboundLink")],1),t._v(", a lightweight descriptor-based wallet library\nwith a "),e("a",{attrs:{href:"https://github.com/bitcoindevkit/bdk-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("cli"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"descriptors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#descriptors"}},[t._v("#")]),t._v(" Descriptors")]),t._v(" "),e("p",[t._v('The Bitcoin scriptpubkey supports various schemes like P2PKH, P2SH, P2WPKH, P2TR (Segwit v1) etc.\nA Descriptor is a simple "description" of what scriptpubkey to be used for a given policy.\nIt can inclue a single pubkey within itself, or an entire miniscript policy.\nOn the other hand, Miniscript policies are used to derive the redeemscript (the actual executable script), whereas the descriptor describes how the redeemscript will be encumbered within the scriptpubkey.')]),t._v(" "),e("p",[t._v('In other words, a descriptor "describes" the procedure to create an '),e("em",[t._v("address")]),t._v(", given a "),e("em",[t._v("spending condition")]),t._v(".")]),t._v(" "),e("p",[t._v("They make it easier to deal with Multisig or complicated key setups.\nDescriptors are super portable and can be easily used by any wallet to determine the list of all addresses that can be generated from the same.\nThis feature creates a common stage for all Bitcoin apps and software.")]),t._v(" "),e("p",[t._v("The concept of descriptor came into existence in 2018 and since then, a lot of wallets have added support for descriptors.\nYou can read the descriptor doc from "),e("code",[t._v("bitcoin-core")]),t._v(" "),e("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v('According to Bitcoin Core, Output Descriptors are "a simple language which can be used to describe collections of output scripts".\nThey bring in themselves, derivation paths, master xpub/xprv fingerprints and paths to generate addresses from.\nLet\'s understand this with an example of an Output Descriptor:')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nDescriptor: pkh([d34db33f/44'/0'/0']xpub6ERaJH[...]LJRcEL/1/*)#ml40v0wf\n            <1> <--------2---------\x3e<----------3---------\x3e<4> <---5---\x3e\n\nSections:\n1 - address type specifier (here, describing P2PK type addresses)\n2 - master key fingerprint and derivation path from master\n3 - xpub at m/44'/0'/0\n4 - path to deriving keys/addresses at\n5 - checksum for the descriptor\n")])])]),e("p",[t._v("A descriptor have three parts:")]),t._v(" "),e("ul",[e("li",[e("em",[t._v("address type specifier")]),t._v(" (item 1) : describes the type of address created by this descriptor.")]),t._v(" "),e("li",[e("em",[t._v("policy")]),t._v(" : the spending condition that locks funds into this address.")]),t._v(" "),e("li",[e("em",[t._v("checksum")]),t._v(" : for quick verification.")])]),t._v(" "),e("p",[t._v("The address type specifiers currently supported are "),e("code",[t._v("pk")]),t._v(", "),e("code",[t._v("pkh")]),t._v(", "),e("code",[t._v("sh")]),t._v(", "),e("code",[t._v("wpkh")]),t._v(", "),e("code",[t._v("wsh")]),t._v(" for corresponding address type and recently added "),e("code",[t._v("tr")]),t._v(" for taproot addresses.")]),t._v(" "),e("p",[t._v("There is a special address specifier called "),e("code",[t._v("combo")]),t._v(" that creates addresses of all types from spending policy policy.")]),t._v(" "),e("p",[t._v("After the address specifier, comes the "),e("em",[t._v("policy")]),t._v(' that describes how the funds in the address can be spent. The descriptor\nabove in the example has a simple spending policy of "spend by the correct private key". There can be more complicated policies,\nand we will touch them in later sections.')]),t._v(" "),e("p",[e("code",[t._v("multi")]),t._v(" is a special keyword that can be used as both "),e("em",[t._v("address type")]),t._v(" and "),e("em",[t._v("policy")]),t._v(".\nWhen used as an "),e("em",[t._v("address type")]),t._v(" like "),e("code",[t._v("multi(...)")]),t._v(", it will create an address from the raw multisig scriptpubkey.\nWhile when used as a "),e("em",[t._v("policy")]),t._v(" like "),e("code",[t._v("wsh(multi(...))")]),t._v(" it will create that specific address type from the multisig script.\nOf course we cannot use "),e("code",[t._v("pk(multi(...))")]),t._v(", "),e("code",[t._v("pkh(multi(...))")]),t._v(" or "),e("code",[t._v("wpkh(multi(...))")]),t._v(", because these address types cannot hold scripts (any scripts) inside them.")]),t._v(" "),e("p",[t._v("For example a descriptor like "),e("code",[t._v("wsh(multi(2, PKA, PKB, PKC))")]),t._v(" describes a P2WSH type address created by a "),e("code",[t._v("2-of-3")]),t._v(" multisig\nscript using "),e("code",[t._v("PKA")]),t._v(", "),e("code",[t._v("PKB")]),t._v(" and "),e("code",[t._v("PKC")]),t._v(" pubkeys.")]),t._v(" "),e("h2",{attrs:{id:"where-it-all-comes-together"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#where-it-all-comes-together"}},[t._v("#")]),t._v(" Where it all comes together...")]),t._v(" "),e("p",[t._v("In this section, we are going to make a descriptor-based wallet and derive addresses from "),e("code",[t._v("bitcoin-cli")]),t._v(" and then use "),e("code",[t._v("bdk-cli")]),t._v(" to confirm that the addresses generated for descriptor wallets are deterministic for a given descriptor.")]),t._v(" "),e("p",[t._v("We will also try to create a vault miniscript policy and push funds to the vault with a lock time of 2 months.\nDuring this time, we will try to break our vault and see our transactions failing.")]),t._v(" "),e("h4",{attrs:{id:"tools-and-armor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tools-and-armor"}},[t._v("#")]),t._v(" Tools and Armor")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/bitcoindevkit/bdk-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("bdk-cli"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://bitcoindevkit.org/bdk-cli/compiler/#installation",target:"_blank",rel:"noopener noreferrer"}},[t._v("miniscriptc"),e("OutboundLink")],1)])]),t._v(" "),e("h4",{attrs:{id:"setting-up"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setting-up"}},[t._v("#")]),t._v(" Setting Up")]),t._v(" "),e("p",[t._v("We require "),e("code",[t._v("bitcoind")]),t._v(" to run in "),e("code",[t._v("regtest")]),t._v(" mode. Use the following config file, or any other config\nthat you are familiar with.")]),t._v(" "),e("div",{staticClass:"language-txt extra-class"},[e("pre",{pre:!0,attrs:{class:"language-txt"}},[e("code",[t._v("regtest=1\nfallbackfee=0.0001\nserver=1\n\nrpcuser=user\nrpcpassword=password\n")])])]),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start Bitcoin Core")]),t._v("\nbitcoind\n")])])]),e("h3",{attrs:{id:"keys-and-generating-addresses"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keys-and-generating-addresses"}},[t._v("#")]),t._v(" Keys and Generating Addresses")]),t._v(" "),e("p",[t._v("Quick installation for "),e("code",[t._v("bdk-cli")]),t._v(" and "),e("code",[t._v("miniscriptc")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cargo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" bdk-cli "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--features")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("rpc,compiler\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cargo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" bdk "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--features")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"compiler"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--example")]),t._v(" miniscriptc\n")])])]),e("p",[t._v("Let us first generate an XPRV and create the wpkh wallet descriptor")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("XPRV")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("bdk-cli key generate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.xprv'")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("EX_DESC")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wpkh('),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$XPRV")]),t._v("/86'/1'/0'/0/*)\"")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("EX_DESC_CS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("elcli getdescriptorinfo $EX_DESC "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.checksum'")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("EX_DESC")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$EX_DESC")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#$EX_DESC_CS")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set this descriptor in a wallet in bitcoin-cli")]),t._v("\nbitcoin-cli "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-named")]),t._v(" createwallet "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("wallet_name")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mywallet"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("descriptors")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true\nbitcoin-cli "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-rpcwallet")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mywallet"')]),t._v(" importdescriptors "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[{'),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("desc"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(":"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$EX_DESC")]),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(", "),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("timestamp"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(":"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("now"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(", "),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("active"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(": true, "),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("range"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(': [0,100]}]"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$EX_DESC")]),t._v("\n")])])]),e("p",[t._v("It should look something like this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("wpkh(tprv8ZgxMBicQKsPeuazF16EdPZw84eHj55AU8ZKgZgdhu3sXcHnFgjzskfDvZdTaAFHYNCbKqrurFo9onSaT7zGT1i3u3j7LKhVZF5sJA39WPN/86'/1'/0'/0/*)#40hv8z77\n")])])]),e("p",[t._v("Now, we will generate 10 addresses using "),e("code",[t._v("bitcoin-cli")]),t._v(" and thereafter "),e("code",[t._v("bdk-cli")]),t._v(" using this above descriptor.\nNotice how both of them output the same set of addresses.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Generation via bdk-cli")]),t._v("\nrepeat "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" bdk-cli "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" regtest wallet "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--descriptor")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$EX_DESC")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-w")]),t._v(" mywallet get_new_address "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".address"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nbcrt1qc9wzxf8pthyexl00m23ug92pqrthagnzzf33wp\nbcrt1qgnh7e72q92fqujwg3qxlg5kplxkm6rep0nerur\nbcrt1qea6r8yvd0peupk29p94wm0xasvydgdsnyzkhez\nbcrt1qm99230tpqflq0f8kpkn5d2tee02hgqcsw5sd99\nbcrt1qd0afjfnl5udrsfkrj72rl34pss34yluma752qv\nbcrt1qj2aymplrzxcp4m7vcxrzq93g58pmgm4fpluesy\nbcrt1q4p4k63xglftez0h8yc7d4kmhsn5j5kecguu34j\nbcrt1q29z2uanskweur7qrzr43gyv3l028s0pnd9ptvp\nbcrt1qkzpeqz8sd73sucfythjxftez0e3ee30yhp9w67\nbcrt1qptwd6ggy8ttryck2f6yjf4la68apruc3fs7elz\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Generation via bitcoin-cli")]),t._v("\nrepeat "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" bitcoin-cli "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-rpcwallet")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mywallet"')]),t._v(" getnewaddress "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nbcrt1qc9wzxf8pthyexl00m23ug92pqrthagnzzf33wp\nbcrt1qgnh7e72q92fqujwg3qxlg5kplxkm6rep0nerur\nbcrt1qea6r8yvd0peupk29p94wm0xasvydgdsnyzkhez\nbcrt1qm99230tpqflq0f8kpkn5d2tee02hgqcsw5sd99\nbcrt1qd0afjfnl5udrsfkrj72rl34pss34yluma752qv\nbcrt1qj2aymplrzxcp4m7vcxrzq93g58pmgm4fpluesy\nbcrt1q4p4k63xglftez0h8yc7d4kmhsn5j5kecguu34j\nbcrt1q29z2uanskweur7qrzr43gyv3l028s0pnd9ptvp\nbcrt1qkzpeqz8sd73sucfythjxftez0e3ee30yhp9w67\nbcrt1qptwd6ggy8ttryck2f6yjf4la68apruc3fs7elz\n")])])]),e("p",[t._v("Notes:")]),t._v(" "),e("ul",[e("li",[t._v("The "),e("code",[t._v("repeat n {}")]),t._v(" syntax will only work in "),e("code",[t._v("zsh")]),t._v(", you can use other loops for your shell, or just manually repeat the code 10 times.")]),t._v(" "),e("li",[t._v("In case you get different outputs in either of the cases, try deleting "),e("code",[t._v("~/.bdk-bitcoin")]),t._v(" and retrying (thanks "),e("a",{attrs:{href:"https://twitter.com/notmandatory",target:"_blank",rel:"noopener noreferrer"}},[t._v("@Steve"),e("OutboundLink")],1),t._v(" for this tip!)")])]),t._v(" "),e("p",[t._v("Note that both "),e("code",[t._v("bdk-cli")]),t._v(" and "),e("code",[t._v("bitcoin-cli")]),t._v(" produced the exact same addresses. So now we have definitive proof that descriptors can make wallets portable. That single string will be able to make any wallet generate the same set of addresses and hence they can sync and broadcast transactions in the same manner!")]),t._v(" "),e("h3",{attrs:{id:"making-a-multisig-descriptor-for-funds"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#making-a-multisig-descriptor-for-funds"}},[t._v("#")]),t._v(" Making a MultiSig Descriptor for Funds")]),t._v(" "),e("p",[t._v("In the real-life, most of us hold two kinds of savings accounts - one to store huge funds saved throughout our lifetime "),e("em",[t._v("(probably without internet banking functionalities)")]),t._v("\nand another for regular expenses.")]),t._v(" "),e("p",[t._v("In the Bitcoin world, to store huge funds, most people prefer to use a Multisig descriptor with a "),e("code",[t._v("2-of-3")]),t._v(" or "),e("code",[t._v("3-of-4")]),t._v(" setup.\nThey can have one key stored in their PC, one key stored in a hardware wallet, one key stored in writing in a secure vault and another key learnt by heart.\nIn case of a mishap like a house burning on fire or permanent memory loss, they would still be able to recover their funds by using the other keys.")]),t._v(" "),e("p",[t._v("Here's how a secure "),e("code",[t._v("2-of-3")]),t._v(" descriptor generation would look like:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# xprv generation")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("K1_XPRV")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("bdk-cli key generate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".xprv"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("K2_XPRV")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("bdk-cli key generate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".xprv"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("K3_XPRV")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("bdk-cli key generate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".xprv"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# xpub generation")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("K1_XPUB")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("bdk-cli key derive "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--xprv")]),t._v(" $K1_XPRV "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--path")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"m/84'/1'/0'/0\"")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".xpub"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("K2_XPUB")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("bdk-cli key derive "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--xprv")]),t._v(" $K2_XPRV "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--path")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"m/84'/1'/0'/0\"")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".xpub"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("K3_XPUB")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("bdk-cli key derive "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--xprv")]),t._v(" $K3_XPRV "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--path")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"m/84'/1'/0'/0\"")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".xpub"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Descriptors for each key - Since we used BIP-84 generation paths for xpubs,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# we need to append the same to the xprvs so that our wallet can understand ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# which path to generate addresses and xpubs from")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("K1_DESC")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wsh(multi(2,'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$K1_XPRV")]),t._v("/84'/1'/0'/0/*,"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$K2_XPUB")]),t._v(","),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$K3_XPUB")]),t._v('))"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("K2_DESC")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wsh(multi(2,'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$K1_XPUB")]),t._v(","),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$K2_XPRV")]),t._v("/84'/1'/0'/0/*,"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$K3_XPUB")]),t._v('))"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("K3_DESC")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wsh(multi(2,'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$K1_XPUB")]),t._v(","),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$K2_XPUB")]),t._v(","),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$K3_XPRV")]),t._v("/84'/1'/0'/0/*))\"")]),t._v("\n")])])]),e("p",[t._v("Lets create three bdk wallets aliases with above descriptors for easy future use\nand do initial sync to create the wallet files")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("k1wallet")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bdk-cli -n regtest wallet -w K1 -d $K1_DESC'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("k2wallet")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bdk-cli -n regtest wallet -w K2 -d $K2_DESC'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("k3wallet")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bdk-cli -n regtest wallet -w K3 -d $K3_DESC'")]),t._v("\n\nk1wallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nk2wallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nk3wallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Now, let us send some funds to an address generated by "),e("code",[t._v("k1wallet")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('# ask regtest to generate 101 blocks, so we get 50 regtest coins to play with.\n# because coinbase amounts are only spendable after 100 blocks, we generate\n# 101 blocks, to use the first block\'s coinbase amount.\nCORE_ADDR=$(bitcoin-cli getnewaddress)\nbitcoin-cli generatetoaddress 101 $CORE_ADDR\nbitcoin-cli getbalance\n50.00000000\n\n# And then send 10 btc to an address generated by `K1` descriptor\nBDK_ADDR=$(k1wallet get_new_address | jq -r ".address")\nbitcoin-cli -rpcwallet=mywallet sendtoaddress $BDK_ADDR 10\n\n# Confirm the transaction by creating one more block\nbitcoin-cli generatetoaddress 1 $CORE_ADDR\n')])])]),e("p",[t._v("Now sync the wallets and check balances in each")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("k1wallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nk1wallet get_balance\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"satoshi"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nk2wallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nk2wallet get_balance\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"satoshi"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nk3wallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nk3wallet get_balance\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"satoshi"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Everyone has the same amount of balance.\nThis happened because it was a multisig wallet.\nNow, let's try to spend some balance.\nWe will give back some balance to the wallet maintained by "),e("code",[t._v("bitcoin-cli")]),t._v(".\nBut remember, this is a "),e("code",[t._v("2-of-3")]),t._v(" multisig wallet.\nThat's why we will need at least two keys to sign to make a transaction.")]),t._v(" "),e("p",[t._v("Here's where we will require to use a "),e("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[t._v("PSBT"),e("OutboundLink")],1),t._v(" or a "),e("em",[t._v("partially signed bitcoin transaction")]),t._v(".\nBitcoin uses PSBTs as the standard protocol to create a transaction and add one or more signatures to it before broadcasting the same to\nthe network which finally can become a proper valid "),e("em",[t._v("transaction")]),t._v(".")]),t._v(" "),e("p",[t._v("We will aks "),e("code",[t._v("k2wallet")]),t._v(" to create and sign the transaction then "),e("code",[t._v("k1wallet")]),t._v(" and "),e("code",[t._v("k3wallet")]),t._v(" will co-sign it.\nNote that "),e("code",[t._v("k2wallet")]),t._v(" even if it creates the transaction, doesn't need to sign it, because its a "),e("code",[t._v("2-of-3")]),t._v(" multisig!")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create the transaction, can be started by anyone")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PSBT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("k2wallet create_tx "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--to")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CORE_ADDR")]),t._v(':100000000"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".psbt"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Sign the transaction by K1 and look at the output")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# it should say the psbt is not finalized since only one party has signed")]),t._v("\nk1wallet sign "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--psbt")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$PSBT")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"is_finalized"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" false,\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"psbt"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[...]"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Saving the PSBT signed by K1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("K1_SIGNED_PSBT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("k1wallet sign "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--psbt")]),t._v(" $PSBT "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".psbt"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Sign by K3 - should be finalized this time")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Notice that this time, the input psbt was the signed PSBT of K1")]),t._v("\nk3wallet sign "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--psbt")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$K1_SIGNED_PSBT")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"is_finalized"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" true,\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"psbt"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[...]"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Saving the PSBT signed by K3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("SIGNED_PSBT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("k3wallet sign "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--psbt")]),t._v(" $K1_SIGNED_PSBT "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".psbt"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Broadcast the transaction, again doesn't really matter who broadcasts")]),t._v("\nk2wallet broadcast "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--psbt")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$SIGNED_PSBT")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"txid"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"49e2706fc73c49605692bf1b9ce58baf1eb0307ea39b3118628994fd56c9b642"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Confirm the transaction by generating one block")]),t._v("\nbitcoin-cli generatetoaddress "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CORE_ADDR")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Sync and check balance - it should have gone down by 100000000 + tx fees")]),t._v("\nk1wallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\nk1wallet get_balance\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"satoshi"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("899999810")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Check similarly for `k2wallet` and `k3wallet` and they should all have same balance")]),t._v("\n")])])]),e("p",[t._v("So this proves we can definitely do transactions with multisig wallets with complicated descriptors.\nSince for Bitcoin, having keys equal having access to the accounts, we need to keep our keys safe.\nFor legacy single key wallets, we used to keep backups of the mnemonic codes in multiple places.\nIt was pretty insecure because in case any one of those backups leaks, our entire account would be compromised.\nComplicated multisig wallet descriptors are definitely a step forward - just in case a single key leak or are lost, no one would be able to take charge of the funds we hold.")]),t._v(" "),e("p",[t._v("Another problem with multisig was syncing between wallets to always create consistent addresses. How would\none wallet know whats the next address to create without talking to other wallets? The answer is "),e("code",[t._v("descriptors + PSBT")]),t._v(".\nIf all the wallet shares the correct descriptor string they will always create the exact sequence of addresses and\nby passing around PSBTs they would know how to sign them, without talking to each other. This solves a major problem of multisig interoperability. And BDK makes this process as seamless as possible.")]),t._v(" "),e("h2",{attrs:{id:"retention-bonus-smart-contract-with-bitcoin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#retention-bonus-smart-contract-with-bitcoin"}},[t._v("#")]),t._v(" Retention Bonus - Smart Contract with Bitcoin")]),t._v(" "),e("p",[t._v("Let us consider that a company wants to give its employees a retention bonus for two months.\nIf an employee stays with that company for over 2 months, the employee would get 1 BTC as a reward.\nThis would be a smart contract between the company and an employee.\nThe employee should be able to see that he would get his funds after two months.\nThe company would require confidence that the employee would not be able to withdraw the reward before two months have passed.")]),t._v(" "),e("p",[t._v("The Miniscript policy for this contract would be as follows:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("or(99@and(pk(E),older(8640)),pk(C))\n")])])]),e("p",[t._v("where "),e("code",[t._v("E")]),t._v(" is the employee and "),e("code",[t._v("C")]),t._v(" is the company.")]),t._v(" "),e("p",[t._v("I should emphasize over here that this policy will let the company still transfer funds after the designated 2 months.\nIt's not possible to block them after the lock time has passed, atleast not in a single policy.")]),t._v(" "),e("p",[t._v("Surely, after two months, the funds can be unlocked by the employee but before that, the company can revoke the funds.\nLet us compile this policy down to a descriptor. And this time we will ask help from the "),e("code",[t._v("miniscript")]),t._v(" program.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The Descriptor will be on the log, the E and C are placeholders")]),t._v("\nminiscriptc "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"or(99@and(pk(E),older(8640)),pk(C))"')]),t._v(" sh-wsh\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v("-08-05T12:25:40Z INFO  miniscriptc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Compiling policy: or"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),t._v("@and"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pk"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("E"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",older"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8640")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(",pk"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("C"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v("-08-05T12:25:40Z INFO  miniscriptc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". Descriptor: sh"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wsh"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("andor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pk"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("E"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",older"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8640")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",pk"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("C"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#55wzucxa")]),t._v("\nError: Descriptor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Miniscript"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Unexpected"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Key too short (<66 char), doesn\'t match any format"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("So the compiled descriptor is")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sh(wsh(andor(pk(E),older(8640),pk(C))))\n")])])]),e("p",[t._v("Let's make the keys, generate addresses using the above descriptor and fund it.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# xprvs")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("E_XPRV")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("bdk-cli key generate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".xprv"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("C_XPRV")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("bdk-cli key generate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".xprv"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# xpubs")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("E_XPUB")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("bdk-cli key derive "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--xprv")]),t._v(" $E_XPRV "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--path")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"m/84'/1'/0'/0\"")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".xpub"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("C_XPUB")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("bdk-cli key derive "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--xprv")]),t._v(" $C_XPRV "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--path")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"m/84'/1'/0'/0\"")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".xpub"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# descriptors using the compiled miniscript")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# please note in case company or the employee was using a complicated multisig descriptor,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# it may as well have been added here like we did in the example before")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("E_DESC")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sh(wsh(andor(pk('),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$E_XPRV")]),t._v("/84'/1'/0'/0/*),older(8640),pk("),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$C_XPUB")]),t._v('))))"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("C_DESC")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sh(wsh(andor(pk('),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$E_XPUB")]),t._v("),older(8640),pk("),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$C_XPRV")]),t._v("/84'/1'/0'/0/*))))\"")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Create wallet aliases for easy access and sync the wallet to create initial wallet files")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Cwallet")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bdk-cli -n regtest wallet -w C -d $C_DESC'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Ewallet")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bdk-cli -n regtest wallet -w E -d $E_DESC'")]),t._v("\n\nCwallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nEwallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get some funds in  Cwallet's address")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("C_ADDR")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("Cwallet get_new_address "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".address"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\nbitcoin-cli "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-rpcwallet")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("mywallet sendtoaddress "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$C_ADDR")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Confirm the transaction")]),t._v("\nbitcoin-cli generatetoaddress "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CORE_ADDR")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Sync and check balance")]),t._v("\nCwallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nCwallet get_balance\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"satoshi"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Just as before, the employe can also see the fund in their wallet")]),t._v("\nEwallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nEwallet get_balance\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"satoshi"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("According to the spending policy, for "),e("code",[t._v("E")]),t._v(" has to wait for 8640 blocks before he can spend the coins.\nBut let's check what happens if "),e("code",[t._v("E")]),t._v(" tries to transact before the designated 2 months anyway.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# address to send the transaction to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("E_ADDR")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("Ewallet getnewaddress "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".address"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get external_policy id - this identifies which policy the wallet will try to sign against")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("POLICY_ID")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("Ewallet policies "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".external | .id"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create the tx (external_policy id from last step in my case is j7ncy3au")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PSBT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("Ewallet create_tx "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--to")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$E_ADDR")]),t._v(':100000000"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--external_policy")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{'),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$POLICY_ID")]),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(':[0]}"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".psbt"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# sign and save the signed psbt")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("SIGNED_PSBT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("Ewallet sign "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--psbt")]),t._v(" $PSBT "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".psbt"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# now let's try to broadcast - and see it failing")]),t._v("\nEwallet broadcast "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--psbt")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$SIGNED_PSBT")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v("-08-05T17:48:45Z ERROR bdk_cli"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Electrum"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Protocol"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"code"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" Number"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sendrawtransaction RPC error: {'),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("code"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(":-26,"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("message"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(":"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("non-BIP68-final"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v('}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("We get an error saying the transaction we sent is "),e("strong",[t._v("Not BIP68 Final")]),t._v(".\n"),e("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[t._v("BIP68"),e("OutboundLink")],1),t._v(" is a relative lock-time specification that ensures consensus when a signed transaction is sent which is invalid at a given time because the lock time isn't passed.\nSo that's an expected error.")]),t._v(" "),e("p",[t._v("Now let's simulate two months passing and retry.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# simulate two months")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this will take around 1 mins to complete")]),t._v("\nbitcoin-cli generatetoaddress "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8640")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CORE_ADDR")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create, sign and broadcast tx")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PSBT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("Ewallet create_tx "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--to")]),t._v(" $E_ADDR:100000000 "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--external_policy")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{'),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$POLICY_ID")]),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(':[0]}"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".psbt"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("SIGNED_PSBT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("Ewallet sign "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--psbt")]),t._v(" $PSBT "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".psbt"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\nEwallet broadcast "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--psbt")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$SIGNED_PSBT")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"txid"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2a0919bb3ce6e26018698ad1169965301a9ceab6d3da2a3dcb41343dc48e0dba"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Confirm the transaction")]),t._v("\nbitcoin-cli generatetoaddress "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CORE_ADDR")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Sync and check balances")]),t._v("\nCwallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nCwallet get_balance\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"satoshi"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("999999810")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nEwallet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nEwallet get_balance\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"satoshi"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("999999810")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("So this time it worked, because we have simulated 2 months passing by generating 8640 blocks. And both the Company\nand Employe wallet gets updated.\nHence, we saw that we can generate some smart contracts using Bitcoin.")]),t._v(" "),e("h2",{attrs:{id:"inspirations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inspirations"}},[t._v("#")]),t._v(" Inspirations")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Descriptors from Bitcoin Core"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://bitcoin.sipa.be/miniscript",target:"_blank",rel:"noopener noreferrer"}},[t._v("Miniscript"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://bitcoinops.org/en/topics/output-script-descriptors",target:"_blank",rel:"noopener noreferrer"}},[t._v("Output Script Descriptors"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://bitcoindevkit.org/descriptors",target:"_blank",rel:"noopener noreferrer"}},[t._v("Descriptors in Bitcoin Dev Kit"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://bitcoindevkit.org/blog/2020/11/descriptors-in-the-wild/#the-role-of-descriptors",target:"_blank",rel:"noopener noreferrer"}},[t._v("Role of Descriptors"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://gist.github.com/notmandatory/483c7edd098550c235da75d5babcf255",target:"_blank",rel:"noopener noreferrer"}},[t._v("Making a Taproot Descriptor Wallet using bitcoin-cli"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=XM1lzN4Zfks",target:"_blank",rel:"noopener noreferrer"}},[t._v("Miniscripts SBC '19 - Video"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=xC25NzIjzog",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rethinking Wallet Architecture: Native Descriptor Wallets - Video"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("Special thanks to my mentor "),e("a",{attrs:{href:"https://twitter.com/notmandatory",target:"_blank",rel:"noopener noreferrer"}},[t._v("Steve Myers"),e("OutboundLink")],1),t._v(" for the constant motivation and support he gave me and for clearing so many doubts!\nImmense thanks to "),e("a",{attrs:{href:"https://github.com/rajarshimaitra",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raj"),e("OutboundLink")],1),t._v(" for reviewing this blog and giving such detailed suggestions.\nMany of the lines added here are his.\nAlso, thanks to the folks at the "),e("code",[t._v("#miniscript")]),t._v(" IRC channel to help me out with the Retention Bonus policy.")]),t._v(" "),e("p",[t._v("This blog was written during "),e("a",{attrs:{href:"https://summerofbitcoin.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Summer of Bitcoin 2021"),e("OutboundLink")],1),t._v(" by "),e("a",{attrs:{href:"https://twitter.com/@sandipndev",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sandipan Dey"),e("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);e.default=n.exports}}]);