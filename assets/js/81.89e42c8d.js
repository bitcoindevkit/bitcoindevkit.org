(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{446:function(t,e,a){"use strict";a.r(e);var n=a(7),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"installation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),e("h2",{attrs:{id:"requirements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requirements"}},[t._v("#")]),t._v(" Requirements")]),t._v(" "),e("p",[t._v("The only requirement to run the "),e("code",[t._v("bdk-cli")]),t._v(" tool is a Linux/macOS system with a fairly recent Rust\ntoolchain installed. Since Linux distros tend to lag behind with updates, the quickest way to\ninstall the Rust compiler and Cargo is "),e("a",{attrs:{href:"https://rustup.rs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("rustup.rs"),e("OutboundLink")],1),t._v(". You can head there and\nfollow their instructions, after which you can test if everything went fine by running\n"),e("code",[t._v("cargo version")]),t._v(", which should print something like:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("cargo 1.56.0 (4ed5d137b 2021-10-04)\n")])])]),e("p",[t._v("As an alternative to installing the Rust toolchain, you can try using a\n"),e("a",{attrs:{href:"https://hub.docker.com/_/rust",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker image"),e("OutboundLink")],1),t._v(" and working inside of it, but that's meant for more\nadvanced users and won't be covered in this guide.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),e("p",[t._v("At the time of writing, the project requires cargo >= 1.56.0, which is our minimum supported rust version (MSRV) as of May 2022. If you have an older version installed with rustup.rs, you can upgrade it with "),e("code",[t._v("rustup update")]),t._v(".")])]),t._v(" "),e("h2",{attrs:{id:"installing-the-bdk-cli-tool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installing-the-bdk-cli-tool"}},[t._v("#")]),t._v(" Installing the "),e("code",[t._v("bdk-cli")]),t._v(" tool")]),t._v(" "),e("p",[t._v("Once Cargo is installed, you can proceed to install the interactive "),e("code",[t._v("bdk-cli")]),t._v(" tool directly from\nthe GitHub repository, by running:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# all features with the blocking esplora client ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cargo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--git")]),t._v(" https://github.com/bitcoindevkit/bdk-cli "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--features")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("esplora-ureq,compiler\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# all features with the async esplora client ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cargo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--git")]),t._v(" https://github.com/bitcoindevkit/bdk-cli "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--features")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("esplora-reqwest,compiler\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# minimal install (only repl feature is on by default)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cargo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--git")]),t._v(" https://github.com/bitcoindevkit/bdk-cli\n")])])]),e("p",[t._v("For Windows users, the default SQLite database requires extensive configuration and "),e("code",[t._v("bdk-cli")]),t._v(" will not build properly if SQLite is unconfigured. To proceed with the installation using "),e("code",[t._v("sled")]),t._v(" instead, run:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# disable sqlite and use sled")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cargo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" bdk-cli --no-default-features "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--features")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("key-value-db,esplora-ureq,compiler\n")])])]),e("p",[t._v("This command may take a while to finish, since it will fetch and compile all the dependencies and the "),e("code",[t._v("bdk")]),t._v(" library itself.")]),t._v(" "),e("p",[t._v("Once it's done, you can check if everything went fine by running "),e("code",[t._v("bdk-cli --help")]),t._v(" which should print something like this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("bdk-cli 0.5.0\nAlekos Filini <alekos.filini@gmail.com>:Riccardo Casatta <riccardo@casatta.it>:Steve Myers <steve@notmandatory.org>\nThe BDK Command Line Wallet App\n\nbdk-cli is a light weight command line bitcoin wallet, powered by BDK. This app can be used as a playground as well as\ntesting environment to simulate various wallet testing situations. If you are planning to use BDK in your wallet, bdk-\ncli is also a great intro tool to get familiar with the BDK API.\n\nBut this is not just any toy. bdk-cli is also a fully functioning Bitcoin wallet with taproot support!\n\n\nUSAGE:\n    bdk-cli [OPTIONS] <SUBCOMMAND>\n\nFLAGS:\n    -h, --help       \n            Prints help information\n\n    -V, --version    \n            Prints version information\n\n\nOPTIONS:\n    -n, --network <NETWORK>    \n            Sets the network [default: testnet]\n\n\nSUBCOMMANDS:\n    compile    Compile a miniscript policy to an output descriptor\n    help       Prints this message or the help of the given subcommand(s)\n    key        Key Management Operations\n    repl       REPL command loop mode\n    wallet     Wallet Operations\n\n")])])]),e("p",[t._v("An example command to sync a testnet wallet to a default electrum server looks like this:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("bdk-cli wallet "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-w")]),t._v(" example "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--descriptor")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wpkh(tprv8ZgxMBicQKsPexGYyaFwnAsCXCjmz2FaTm6LtesyyihjbQE3gRMfXqQBXKM43DvC1UgRVv1qom1qFxNMSqVAs88qx9PhgFnfGVUdiiDf6j4/0/*)"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);