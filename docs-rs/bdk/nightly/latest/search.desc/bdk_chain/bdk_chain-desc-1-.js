searchState.loadedDescShard("bdk_chain", 1, "Reads a boolean.\nReads a 16-bit signed integer.\nReads a 32-bit signed integer.\nReads a 64-bit signed integer.\nReads an 8-bit signed integer.\nReads a byte slice.\nReads a 16-bit unsigned integer.\nReads a 32-bit unsigned integer.\nReads a 64-bit unsigned integer.\nReads an 8-bit unsigned integer.\nEncodes an object into a vector.\nEncodes an object into a hex-encoded string.\nThe invalid checksum.\nThe expected checksum.\nThe maximum capacity.\nThe capacity requested.\nThe mainnet parameters.\nParameters that influence chain consensus.\nThe regtest parameters.\nThe signet parameters.\nThe testnet3 parameters.\nThe testnet3 parameters.\nThe testnet4 parameters.\nDetermines whether minimal difficulty may be used for …\nTime when BIP16 becomes active.\nBlock height at which BIP34 becomes active.\nBlock height at which BIP65 becomes active.\nBlock height at which BIP66 becomes active.\nThe maximum <strong>attainable</strong> target value for these params.\nNumber of blocks with the same set of rules.\nNetwork for which parameters are valid.\nDetermines whether retargeting is disabled for this …\nProof of work limit value. It contains the lowest possible …\nExpected amount of time to mine one block.\nDifficulty recalculation interval.\nMinimum blocks including miner confirmation of the total …\nProvides an instance of string-to-byte decoder.\nProvides an instance of byte-to-string encoder.\nError returned when decoding fails.\nThe decoder state.\nTransforms given bytes and writes to the writer.\nThe encoder state.\nHex-encoding strategy\nError returned when decoder can’t be created.\nConverts error into a type implementing <code>serde::de::Error</code>\nHelper for <code>#[serde(with = &quot;&quot;)]</code>.\nDeserializes the value as consensus-encoded\nTransform the provided slice and write to the writer.\nWrite data in buffer (if any) to the writer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs the decoder from string.\nImplements hex encoding.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms the conversion.\nSerializes the value as consensus-encoded\nMarker for upper/lower case type-level flags (“…\nError returned when a hex string contains invalid …\nError returned when a hex string decoder can’t be …\nHex decoder state.\nHex byte encoder.\nMarker for using lower-case hex encoding.\nMarker for using upper-case hex encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nSignature was empty.\nAn ECDSA signature-related error.\nHex decoding error.\nA secp256k1 error.\nHolds signature serialized in-line (not in <code>Vec</code>).\nNon-standard sighash type.\nAn ECDSA signature with the corresponding hash type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes from slice following the standardness rules …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over bytes of the signature.\nSerializes an ECDSA signature (inner secp256k1 signature …\nSerializes an ECDSA signature (inner secp256k1 signature …\nConstructs an ECDSA Bitcoin signature for …\nThe corresponding hash type.\nThe underlying ECDSA Signature.\nSerializes an ECDSA signature (inner secp256k1 signature …\nWrites this serialized signature to a <code>writer</code>.\nHex string contains prefix.\nError when hex string contains a prefix (e.g. 0x).\nHex string is missing prefix.\nError when hex string is missing a prefix (e.g. 0x).\nError parsing integer from hex string.\nError parsing integer from string.\nError with rich context returned when a string can’t be …\nError returned when parsing integer from an supposedly …\nError returned when parsing integer from an supposedly …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the input that was attempted to be parsed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA bitcoin block hash.\nFilter hash, as defined in BIP-157\nFilter header, as defined in BIP-157\nA hash of the Merkle tree branch or root for transactions.\nA bitcoin transaction hash/transaction ID.\nA hash corresponding to the witness structure commitment …\nA hash corresponding to the Merkle tree root for witness …\nA bitcoin witness transaction ID.\nLength of the hash’s internal block size, in bytes.\nThe byte array that represents the hash internally.\nFlag indicating whether user-visible serializations of …\nFlag indicating whether user-visible serializations of …\nA hashing engine which bytes can be serialized into. It is …\nAttempted to create a hash from an invalid length slice.\nTrait which applies to hashes of all types.\nA hashing engine which bytes can be serialized into.\nA hash computed from a RFC 2104 HMAC. Parameterized by the …\nPair of underlying hash engines, used for the inner and …\nLength of the hash, in bytes.\nByte array representing the internal state of the hash …\nReturns an all zero hash.\nReturns a reference to the underlying byte array.\nAdds slicing traits implementations to a given type <code>$ty</code>\nUseful comparison functions.\nConstructs a new engine.\nConstructs a new engine.\nReturns the expected slice length.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nProduces a hash from the current state of a given engine.\nA special constructor giving direct access to the …\nCopies a byte slice into a hash object.\nHashes some bytes.\nHashes some bytes.\nHASH160 (SHA256 then RIPEMD160) implementation.\nHashes all the byte slices retrieved from the iterator …\nHashes all the byte slices retrieved from the iterator …\nCreates a new newtype around a <code>Hash</code> type.\nAdds hexadecimal formatting implementation of a trait <code>$imp</code> …\nHash-based Message Authentication Code (HMAC).\nAdd data to the hash engine.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invalid slice length.\nOutputs the midstate of the hash engine. This function …\nReturn the number of bytes already …\nConstructs a new keyed HMAC from <code>key</code>.\nRIPEMD160 implementation.\nImplements <code>Serialize</code> and <code>Deserialize</code> for a type <code>$t</code> which …\nMacros for serde trait implementations, and supporting …\nSHA1 implementation.\nSHA256 implementation.\nSHA256d implementation (double SHA256).\nSHA256t implementation (tagged SHA256).\nMacro used to define a newtype tagged hash.\nSHA384 implementation.\nSHA512 implementation.\nSHA512_256 implementation.\nSipHash 2-4 implementation.\nReturns the underlying byte array.\nCompare two slices for equality in fixed time. Panics if …\nOutput of the Bitcoin HASH160 hash function. …\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nIterator over bytes which encodes the bytes and yields hex …\nPossible case of hex.\nThe type providing <code>fmt::Display</code> implementation.\nExtension trait for types that can be displayed as hex.\nError type returned while parsing hex string.\nTrait for objects that can be deserialized from hex …\nConvenience alias for <code>HexToBytesIter&lt;HexDigitsIter&lt;&#39;a&gt;&gt;</code>.\nHex decoding error.\nHex decoding error.\nIterator yielding bytes decoded from an iterator of pairs …\nNon-hexadecimal character.\nNon-hexadecimal character.\nInvalid hex character.\nTried to parse fixed-length hash from a string with the …\nProduce lower-case chars (<code>[0-9a-f]</code>).\nPurported hex string had odd length.\nPurported hex string had odd length.\nProduce upper-case chars (<code>[0-9A-F]</code>).\nAppends hex-encoded content to an existing <code>String</code>.\nDisplay <code>Self</code> as a continuous sequence of ASCII hex chars.\nImplements a buffered encoder.\nHelpers for displaying bytes as hex strings.\nError code for the <code>hex-conservative</code> crate.\nFormat known-length array as hex.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduces an object from a hex string.\nConstructs a custom hex decoding iterator from another …\nHints how much bytes to reserve when creating a <code>String</code>.\nAdds <code>core::fmt</code> trait implementations to type <code>$ty</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns the invalid character byte.\nReturns the odd length of the input string.\nConstructs a new <code>HexToBytesIter</code> from a string slice.\nConstructs a new <code>BytesToHexIter</code> from a byte iterator.\nHex encoding and decoding.\nRe-exports of the common crate traits.\nQuick and dirty macro for parsing hex in tests.\nCreate a hex-encoded string.\nCreate a lower-hex-encoded string.\nCreate an upper-hex-encoded string.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nFormats error.\nHex-encodes bytes into the provided buffer.\nReturns the written bytes as a hex <code>str</code>.\nResets the buffer to become empty.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if no more bytes can be written into the …\nCreates an empty <code>BufEncoder</code>.\nEncodes <code>byte</code> as hex in given <code>case</code> and appends it to the …\nEncodes <code>bytes</code> as hex in given <code>case</code> and appends them to the …\nEncodes as many <code>bytes</code> as fit into the buffer as hex and …\nHow many bytes can be written to this buffer.\nThe type providing <code>fmt::Display</code> implementation.\nDisplays byte array as hex.\nDisplays byte slice as hex.\nExtension trait for types that can be displayed as hex.\nAppends hex-encoded content to an existing <code>String</code>.\nAppends hex-encoded content to an existing <code>String</code>.\nDisplay <code>Self</code> as a continuous sequence of ASCII hex chars.\nFormat known-length array as hex.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHints how much bytes to reserve when creating a <code>String</code>.\nHints how much bytes to reserve when creating a <code>String</code>.\nAdds <code>core::fmt</code> trait implementations to type <code>$ty</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a hex-encoded string.\nCreate a hex-encoded string.\nCreate a lower-hex-encoded string.\nCreate a lower-hex-encoded string.\nCreate an upper-hex-encoded string.\nCreate an upper-hex-encoded string.\nHex decoding error.\nHex decoding error.\nNon-hexadecimal character.\nNon-hexadecimal character.\nInvalid hex character.\nTried to parse fixed-length hash from a string with the …\nTried to parse fixed-length hash from a string with the …\nPurported hex string had odd length.\nPurported hex string had odd length.\nThe expected length.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe invalid length.\nError type returned while parsing hex string.\nTrait for objects that can be deserialized from hex …\nHex decoding error.\nHex decoding error.\nNon-hexadecimal character.\nNon-hexadecimal character.\nTried to parse fixed-length hash from a string with the …\nPurported hex string had odd length.\nProduces an object from a hex string.\nThe type providing <code>fmt::Display</code> implementation.\nExtension trait for types that can be displayed as hex.\nError type returned while parsing hex string.\nTrait for objects that can be deserialized from hex …\nDisplay <code>Self</code> as a continuous sequence of ASCII hex chars.\nProduces an object from a hex string.\nA hash computed from a RFC 2104 HMAC. Parameterized by the …\nPair of underlying hash engines, used for the inner and …\nPair of underlying hash midstates which represent the …\nReturns the argument unchanged.\nMidstate of the inner hash engine\nCalls <code>U::from(self)</code>.\nMidstate of the outer hash engine\nOutput of the RIPEMD160 hash function.\nEngine to compute RIPEMD160 hash function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <strong>data structure</strong> that can be deserialized from any data …\nA <strong>data format</strong> that can deserialize any data structure …\nThe error type that can be returned if some error occurs …\nThe error type when some error occurs during serialization.\nThe output type produced by this <code>Serializer</code> during …\nA <strong>data structure</strong> that can be serialized into any data …\nType returned from <code>serialize_map</code> for serializing the …\nType returned from <code>serialize_seq</code> for serializing the …\nType returned from <code>serialize_struct</code> for serializing the …\nType returned from <code>serialize_struct_variant</code> for …\nType returned from <code>serialize_tuple</code> for serializing the …\nType returned from <code>serialize_tuple_struct</code> for serializing …\nType returned from <code>serialize_tuple_variant</code> for serializing …\nA <strong>data format</strong> that can serialize any data structure …\nCollect an iterator as a map.\nCollect an iterator as a sequence.\nSerialize a string produced by an implementation of <code>Display</code>…\nGeneric data structure deserialization framework.\nDeserialize this value from the given Serde deserializer.\nRequire the <code>Deserializer</code> to figure out how to drive the …\nHint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a <code>char</code> value.\nHint that the <code>Deserialize</code> type is expecting an enum value …\nHint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.\nHint that the <code>Deserialize</code> type is expecting the name of a …\nHint that the <code>Deserialize</code> type needs to deserialize a …\nHint that the <code>Deserialize</code> type is expecting a map of …\nHint that the <code>Deserialize</code> type is expecting a newtype …\nHint that the <code>Deserialize</code> type is expecting an optional …\nHint that the <code>Deserialize</code> type is expecting a sequence of …\nHint that the <code>Deserialize</code> type is expecting a string value …\nHint that the <code>Deserialize</code> type is expecting a string value …\nHint that the <code>Deserialize</code> type is expecting a struct with …\nHint that the <code>Deserialize</code> type is expecting a sequence of …\nHint that the <code>Deserialize</code> type is expecting a tuple struct …\nHint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.\nHint that the <code>Deserialize</code> type is expecting a unit value.\nHint that the <code>Deserialize</code> type is expecting a unit struct …\nHelper macro when implementing the <code>Deserializer</code> part of a …\nDetermine whether <code>Deserialize</code> implementations should …\nDetermine whether <code>Serialize</code> implementations should …\nGeneric data structure serialization framework.\nSerialize this value into the given Serde serializer.\nSerialize a <code>bool</code> value.\nSerialize a chunk of raw byte data.\nSerialize a character.\nSerialize an <code>f32</code> value.\nSerialize an <code>f64</code> value.\nSerialize an <code>i128</code> value.\nSerialize an <code>i16</code> value.\nSerialize an <code>i32</code> value.\nSerialize an <code>i64</code> value.\nSerialize an <code>i8</code> value.\nBegin to serialize a map. This call must be followed by …\nSerialize a newtype struct like <code>struct Millimeters(u8)</code>.\nSerialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.\nSerialize a <code>None</code> value.\nBegin to serialize a variably sized sequence. This call …\nSerialize a <code>Some(T)</code> value.\nSerialize a <code>&amp;str</code>.\nBegin to serialize a struct like …\nBegin to serialize a struct variant like <code>E::S</code> in …\nBegin to serialize a statically sized sequence whose …\nBegin to serialize a tuple struct like …\nBegin to serialize a tuple variant like <code>E::T</code> in …\nSerialize a <code>u128</code> value.\nSerialize a <code>u16</code> value.\nSerialize a <code>u32</code> value.\nSerialize a <code>u64</code> value.\nSerialize a <code>u8</code> value.\nSerialize a <code>()</code> value.\nSerialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.\nSerialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.\nThe input contained a boolean value that was not expected.\nThe input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …\nThe input contained a <code>char</code> that was not expected.\nA <strong>data structure</strong> that can be deserialized from any data …\nA data structure that can be deserialized without …\n<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …\nA <strong>data format</strong> that can deserialize any data structure …\nThe type of the deserializer being converted into.\nThe input contained an enum that was not expected.\nProvides a <code>Visitor</code> access to the data of an enum in the …\nThe <code>Error</code> trait allows <code>Deserialize</code> implementations to …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\n<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …\nThe input contained a floating point <code>f32</code> or <code>f64</code> that was …\nAn efficient way of discarding data from a deserializer.\nConverts an existing value into a <code>Deserializer</code> from which …\nThe input contained a map that was not expected.\nProvides a <code>Visitor</code> access to each entry of a map in the …\nThe input contained a newtype struct that was not expected.\nThe input contained a newtype variant that was not …\nThe input contained an <code>Option&lt;T&gt;</code> that was not expected.\nA message stating what uncategorized thing the input …\nThe input contained a sequence that was not expected.\nProvides a <code>Visitor</code> access to each element of a sequence in …\nThe input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …\n<code>Error</code> is a trait representing the basic expectations for …\nThe input contained a <code>&amp;str</code> or <code>String</code> that was not expected.\nThe input contained a struct variant that was not expected.\nThe input contained a tuple variant that was not expected.\n<code>Unexpected</code> represents an unexpected invocation of any one …\nThe input contained a unit <code>()</code> that was not expected.\nThe input contained a unit variant that was not expected.\nThe input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…\nThe type produced by using this seed.\nThe value produced by this visitor.\nThe <code>Visitor</code> that will be used to deserialize the content …\n<code>VariantAccess</code> is a visitor that is created by the …\nThis trait represents a visitor that walks through a …\nRaised when there is general error when deserializing a …\nEquivalent to the more common <code>Deserialize::deserialize</code> …\nDeserialize this value from the given Serde deserializer.\nRequire the <code>Deserializer</code> to figure out how to drive the …\nHint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a <code>char</code> value.\nHint that the <code>Deserialize</code> type is expecting an enum value …\nHint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.\nHint that the <code>Deserialize</code> type is expecting the name of a …\nHint that the <code>Deserialize</code> type needs to deserialize a …\nHint that the <code>Deserialize</code> type is expecting a map of …\nHint that the <code>Deserialize</code> type is expecting a newtype …\nHint that the <code>Deserialize</code> type is expecting an optional …\nHint that the <code>Deserialize</code> type is expecting a sequence of …\nHint that the <code>Deserialize</code> type is expecting a string value …\nHint that the <code>Deserialize</code> type is expecting a string value …\nHint that the <code>Deserialize</code> type is expecting a struct with …\nHint that the <code>Deserialize</code> type is expecting a sequence of …\nHint that the <code>Deserialize</code> type is expecting a tuple struct …\nHint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.\nHint that the <code>Deserialize</code> type is expecting a unit value.\nHint that the <code>Deserialize</code> type is expecting a unit struct …\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some mutable reference to the inner value if it is …\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some reference to the inner value if it is of type …\nRaised when a <code>Deserialize</code> struct type received more than …\nFormat a message stating what data this Visitor expects to …\nFormat an explanation of what data was being expected. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this value into a deserializer.\nRaised when deserializing a sequence or map and the input …\nRaised when a <code>Deserialize</code> receives a type different from …\nRaised when a <code>Deserialize</code> receives a value of the right …\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nDetermine whether <code>Deserialize</code> implementations should …\nRaised when a <code>Deserialize</code> struct type expected to receive …\nCalled when deserializing a variant with a single value.\nCalled when deserializing a variant with a single value.\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some((key, value)))</code> for the next …\nThis returns <code>Ok(Some((key, value)))</code> for the next …\nThis returns <code>Ok(Some(key))</code> for the next key in the map, or …\nThis returns <code>Ok(Some(key))</code> for the next key in the map, or …\nThis returns a <code>Ok(value)</code> for the next value in the map.\nThis returns a <code>Ok(value)</code> for the next value in the map.\nProvides type-based access to context intended for error …\nProvides type-based access to context intended for error …\nReturns the number of elements remaining in the sequence, …\nReturns the number of entries remaining in the map, if …\nReturns the lower-level source of this error, if any.\nReturns the lower-level source of this error, if any.\nReturns an iterator starting with the current error and …\nCalled when deserializing a struct-like variant.\nCalled when deserializing a tuple-like variant.\nCalled when deserializing a variant with no values.\nRaised when a <code>Deserialize</code> struct type received a field …\nRaised when a <code>Deserialize</code> enum type received a variant …\nBuilding blocks for deserializing basic values using the …\n<code>variant</code> is called to identify which variant to deserialize.\n<code>variant</code> is called to identify which variant to deserialize.\nThe input contains a boolean.\nThe input contains a byte array that lives at least as …\nThe input contains a string that lives at least as long as …\nThe input contains a byte array and ownership of the byte …\nThe input contains a byte array. The lifetime of the byte …\nThe input contains a <code>char</code>.\nThe input contains an enum.\nThe input contains an <code>f32</code>.\nThe input contains an <code>f64</code>.\nThe input contains a <code>i128</code>.\nThe input contains an <code>i16</code>.\nThe input contains an <code>i32</code>.\nThe input contains an <code>i64</code>.\nThe input contains an <code>i8</code>.\nThe input contains a key-value map.\nThe input contains a newtype struct.\nThe input contains an optional that is absent.\nThe input contains a sequence of elements.\nThe input contains an optional that is present.\nThe input contains a string. The lifetime of the string is …\nThe input contains a string and ownership of the string is …\nThe input contains a <code>u128</code>.\nThe input contains a <code>u16</code>.\nThe input contains a <code>u32</code>.\nThe input contains a <code>u64</code>.\nThe input contains a <code>u8</code>.\nThe input contains a unit <code>()</code>.\nA deserializer holding a <code>bool</code>.\nA deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …\nA deserializer holding a <code>&amp;str</code> with a lifetime tied to …\nA deserializer holding a <code>&amp;[u8]</code>. Always calls …\nA deserializer holding a <code>char</code>.\nA deserializer holding a <code>Cow&lt;str&gt;</code>.\nA deserializer holding an <code>EnumAccess</code>.\nA minimal representation of all possible errors that can …\nA deserializer holding an <code>f32</code>.\nA deserializer holding an <code>f64</code>.\nA deserializer holding an <code>i128</code>.\nA deserializer holding an <code>i16</code>.\nA deserializer holding an <code>i32</code>.\nA deserializer holding an <code>i64</code>.\nA deserializer holding an <code>i8</code>.\nA deserializer holding an <code>isize</code>.\nA deserializer holding a <code>MapAccess</code>.\nA deserializer that iterates over a map.\nA deserializer holding a <code>SeqAccess</code>.\nA deserializer that iterates over a sequence.\nA deserializer holding a <code>&amp;str</code>.\nA deserializer holding a <code>String</code>.\nA deserializer holding a <code>u128</code>.\nA deserializer holding a <code>u16</code>.\nA deserializer holding a <code>u32</code>.\nA deserializer holding a <code>u64</code>.\nA deserializer holding a <code>u8</code>.\nA deserializer holding a <code>()</code>.\nA deserializer holding a <code>usize</code>.\nCheck for remaining elements after passing a …\nCheck for remaining elements after passing a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new borrowed deserializer from the given string.\nCreate a new deserializer from the given bytes.\nCreate a new borrowed deserializer from the given borrowed …\nConstruct a new <code>MapDeserializer&lt;I, E&gt;</code>.\nConstruct a new <code>SeqDeserializer&lt;I, E&gt;</code>.\nConstruct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.\nConstruct a new <code>MapAccessDeserializer&lt;A&gt;</code>.\nConstruct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.\nTrait used by <code>Serialize</code> implementations to generically …\nThe error type when some error occurs during serialization.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nHelper type for implementing a <code>Serializer</code> that does not …\nThe output type produced by this <code>Serializer</code> during …\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nA <strong>data structure</strong> that can be serialized into any data …\nReturned from <code>Serializer::serialize_map</code>.\nType returned from <code>serialize_map</code> for serializing the …\nReturned from <code>Serializer::serialize_seq</code>.\nType returned from <code>serialize_seq</code> for serializing the …\nReturned from <code>Serializer::serialize_struct</code>.\nType returned from <code>serialize_struct</code> for serializing the …\nReturned from <code>Serializer::serialize_struct_variant</code>.\nType returned from <code>serialize_struct_variant</code> for …\nReturned from <code>Serializer::serialize_tuple</code>.\nType returned from <code>serialize_tuple</code> for serializing the …\nReturned from <code>Serializer::serialize_tuple_struct</code>.\nType returned from <code>serialize_tuple_struct</code> for serializing …\nReturned from <code>Serializer::serialize_tuple_variant</code>.\nType returned from <code>serialize_tuple_variant</code> for serializing …\nA <strong>data format</strong> that can serialize any data structure …\n<code>Error</code> is a trait representing the basic expectations for …\nCollect an iterator as a map.\nCollect an iterator as a sequence.\nSerialize a string produced by an implementation of <code>Display</code>…\nUsed when a <code>Serialize</code> implementation encounters any error …\nFinish serializing a sequence.\nFinish serializing a tuple.\nFinish serializing a tuple struct.\nFinish serializing a tuple variant.\nFinish serializing a map.\nFinish serializing a struct.\nFinish serializing a struct variant.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDetermine whether <code>Serialize</code> implementations should …\nSerialize this value into the given Serde serializer.\nSerialize a <code>bool</code> value.\nSerialize a chunk of raw byte data.\nSerialize a character.\nSerialize a sequence element.\nSerialize a tuple element.\nSerialize a map entry consisting of a key and a value.\nSerialize an <code>f32</code> value.\nSerialize an <code>f64</code> value.\nSerialize a tuple struct field.\nSerialize a tuple variant field.\nSerialize a struct field.\nSerialize a struct variant field.\nSerialize an <code>i128</code> value.\nSerialize an <code>i16</code> value.\nSerialize an <code>i32</code> value.\nSerialize an <code>i64</code> value.\nSerialize an <code>i8</code> value.\nSerialize a map key.\nBegin to serialize a map. This call must be followed by …\nSerialize a newtype struct like <code>struct Millimeters(u8)</code>.\nSerialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.\nSerialize a <code>None</code> value.\nBegin to serialize a variably sized sequence. This call …\nSerialize a <code>Some(T)</code> value.\nSerialize a <code>&amp;str</code>.\nBegin to serialize a struct like …\nBegin to serialize a struct variant like <code>E::S</code> in …\nBegin to serialize a statically sized sequence whose …\nBegin to serialize a tuple struct like …\nBegin to serialize a tuple variant like <code>E::T</code> in …\nSerialize a <code>u128</code> value.\nSerialize a <code>u16</code> value.\nSerialize a <code>u32</code> value.\nSerialize a <code>u64</code> value.\nSerialize a <code>u8</code> value.\nSerialize a <code>()</code> value.\nSerialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.\nSerialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.\nSerialize a map value.\nIndicate that a struct field has been skipped.\nIndicate that a struct variant field has been skipped.\nFunctions used by serde impls of all hashes.\nSize, in bits, of the hash.\nDefault serialization/deserialization methods.\nDo serde deserialization.\nHelper function to turn a deserialized slice into the …\nDo serde serialization.\nOutput of the SHA1 hash function.\nEngine to compute SHA1 hash function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput of the SHA256 hash function.\nEngine to compute SHA256 hash function.\nOutput of the SHA256 hash function.\nComputes hash from <code>bytes</code> in <code>const</code> context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new <code>Midstate</code> from the inner value.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCreate a new <code>HashEngine</code> from a <code>Midstate</code>.\nCopies a byte slice into the <code>Midstate</code> object.\nIterate the sha256 algorithm to turn a sha256 hash into a …\nCreates midstate for tagged hashes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the <code>Midstate</code> and returns the underlying byte array.\nOutput of the SHA256d hash function.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nOutput of the SHA256t hash function.\nTrait representing a tag that can be used as a context for …\nReturns a hash engine that is pre-tagged and is ready to …\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nOutput of the SHA384 hash function.\nEngine to compute SHA384 hash function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput of the SHA512 hash function.\nEngine to compute SHA512 hash function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput of the SHA512/256 hash function.\nEngine to compute SHA512/256 hash function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput of the SipHash24 hash function.\nEngine to compute the SipHash24 hash function.\nInternal state of the <code>HashEngine</code>.\nReturns the (little endian) 64-bit integer representation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash as <code>u64</code> from the current state of a given …\nCreates a hash from its (little endian) 64-bit integer …\nHashes the given data directly to u64 with an engine with …\nHashes the given data with an engine with the provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the keys of this engine.\nCreates a new SipHash24 engine.\nCreates a new SipHash24 engine with keys.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nThe operation failed because a pipe was closed.\nA trait describing an input stream that uses an internal …\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nWraps an in memory reader providing the <code>position</code> function.\nContains the error value\nThe <code>io</code> crate error type.\nA minimal subset of <code>std::io::ErrorKind</code> which is used for …\nA bridging wrapper providing the IO traits for types that …\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA parameter was incorrect.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nContains the success value\nA custom error that does not fall under any other I/O …\nThe operation lacked the necessary privileges to complete.\nA generic trait describing an input stream. See …\nResult type returned by functions in this crate.\nA sink to which all writes succeed. See <code>std::io::Sink</code> for …\nReader adapter which limits the bytes read from an …\nThe I/O operation’s timeout expired, causing it to be …\nA bridging wrapper providing the std traits for types that …\nAn error returned when an operation could not be completed …\nThe operation needs to block to complete, but the blocking …\nA generic trait describing an output stream. See …\nAn error returned when an operation could not be completed …\nMarks the buffered data up to amount as consumed.\nReturns data read from this reader, filling the internal …\nFlushes this output stream, ensuring that all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWraps a <code>std</code> IO type to implement the traits from this …\nWraps a mutable reference to <code>std</code> IO type to implement the …\nReturns a reference to this error.\nBecause we cannot provide a blanket implementation of …\nReturns a reference to the wrapped value.\nReturns a reference to the wrapped value.\nReturns a reference to the inner buffer.\nReturns a mutable reference to the wrapped value.\nReturns a mutable reference to the wrapped value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the wrapped value.\nReturns the wrapped value.\nReturns the inner buffer.\nReturns the error kind for this error.\nWraps an IO type.\nWraps an IO type.\nCreates a <code>Cursor</code> by wrapping <code>inner</code>.\nCreates a new I/O error.\nWraps a boxed IO type.\nWraps a boxed IO type.\nWraps a mutable reference to IO type.\nWraps a mutable reference to IO type.\nReturns the position read up to thus far.\nReads bytes from source into <code>buf</code>.\nReads bytes from source until <code>buf</code> is full.\nReads all bytes until EOF from the underlying reader into …\nAttempts to read up to limit bytes from the reader, …\nSets the internal position.\nReturns a sink to which all writes succeed. See …\nCreates an adapter which will read at most <code>limit</code> bytes.\nWrites <code>buf</code> into this writer, returning how many bytes were …\nAttempts to write an entire buffer into this writer.\nA base58 decoding error.\nAn always-compressed Bitcoin ECDSA public key\nError originated while parsing string.\nEven parity.\nError returned while generating key from slice.\nError generated from WIF key format.\nhex to array conversion error.\nBase58 decoded data contained an invalid address version …\nInvalid address version in decoded base58 data.\nBase58 decoded data was an invalid length.\nDecoded base58 data was an invalid length.\nHex decoding error.\n<code>PublicKey</code> hex should be 66 or 130 digits long.\nInvalid key prefix error.\nInvalid Length of the slice.\nOpaque data structure that holds a keypair consisting of a …\nOdd parity.\nRepresents the parity passed between FFI function calls.\nError returned when parsing a <code>CompressedPublicKey</code> from a …\nError returned while constructing public key from string.\nA Bitcoin ECDSA private key\nA hash of a public key.\nA Bitcoin ECDSA public key\nThe secp256k1 engine, used to execute all signature …\nA Secp256k1 error.\nA secp256k1 error.\nSecp256k1 Error.\nAn opaque return type for PublicKey::to_sort_key\nA trait for tweaking BIP340 key types (x-only public keys …\nTweaked key type with optional auxiliary information\nTweaked key type\nTweaked BIP-340 key pair\nTweaked BIP-340 X-coord-only public key\nSegwit public keys must always be compressed.\nUntweaked BIP-340 key pair\nUntweaked BIP-340 X-coord-only public key\nMarker trait for indicating that an instance of <code>Secp256k1</code> …\nSegWit version of a public key hash.\nAn x-only public key, used for verification of Taproot …\nWhether this public key should be serialized as compressed\nWhether this private key should be serialized as compressed\nDirectly converts an <code>UntweakedPublicKey</code> to a …\nCreates a new <code>TweakedPublicKey</code> from a <code>XOnlyPublicKey</code>. No …\nCreates a new <code>TweakedKeypair</code> from a <code>Keypair</code>. No tweak is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>TweakedPublicKey</code> for <code>keypair</code>.\nThe actual ECDSA key\nThe actual ECDSA key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invalid version.\nReturns the invalid payload length.\nThe network kind on which this key should be used\nReturns the <code>TweakedPublicKey</code> and its <code>Parity</code> for this …\nSerialize the key as a byte-encoded pair of values. In …\nTweaks an untweaked key with corresponding public key …\nReturns the underlying public key.\nReturns the underlying key pair.\nOverflowed the bits array\nOverflowed the hashes array\nThe left and right branches should never be identical\nData structure that represents a block header paired to a …\nAn error when verifying the merkle block.\nMerkle root in the header doesn’t match to the root …\nPartial merkle tree contains no transactions.\nNot all bits were consumed\nNot all hashes were consumed\nThere must be at least one bit per node in the partial …\nData structure that represents a partial merkle tree.\nThere are too many hashes\nThere are too many transactions.\nReturns the node-is-parent-of-matched-txid bits of the …\nCalculates the merkle root of an iterator of <em>hashes</em>.\nCalculates the merkle root of a list of <em>hashes</em>, inline (in …\nExtract the matching txid’s represented by this partial …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a partial merkle tree The <code>txids</code> are the …\nReturns the transaction ids and internal hashes of the …\nThe block header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the total number of transactions in the block.\nTransactions making up a partial merkle tree\nMainnet Bitcoin.\nThe Bitcoin mainnet network.\nThe cryptocurrency network to act on.\nWhat kind of network we are on.\nAn error in parsing network string.\nBitcoin’s regtest network.\nBitcoin’s signet network.\nSome kind of testnet network.\nBitcoin’s testnet network. (In future versions this will …\nBitcoin’s testnet4 network. (In future versions this …\nError in parsing network from chain hash.\nModule for serialization/deserialization of network …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA message which can be sent on the Bitcoin network\nBitcoin mainnet network magic bytes.\nBLOOM means the node is capable and willing to handle …\nCOMPACT_FILTERS means the node will service basic block …\nGETUTXO means the node is capable of responding to the …\nNetwork magic bytes to identify the cryptocurrency network …\nNETWORK means that the node is capable of serving the …\nNETWORK_LIMITED means the same as NODE_NETWORK with the …\nNONE means no services supported.\nP2P_V2 indicates that the node supports the P2P v2 …\nVersion of the protocol as appearing in network message …\nAn error in parsing magic bytes.\nBitcoin regtest network magic bytes.\nBitcoin signet network magic bytes.\nFlags to indicate which network services a node supports.\nBitcoin testnet3 network magic bytes.\nBitcoin testnet3 network magic bytes.\nBitcoin testnet4 network magic bytes.\nError in creating a Network from Magic bytes.\nWITNESS indicates that a node can be asked for blocks and …\nAdd ServiceFlags together.\nBitcoin network addresses.\nNetwork byte-order ipv6 address, or ipv4-mapped ipv6 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate network magic from bytes.\nReturns the magic bytes for the network defined by <code>params</code>.\nCheck whether ServiceFlags are included in this one.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBitcoin network messages.\nBitcoin blockdata network messages.\nBitcoin Connection Bloom filtering network messages.\nBIP152  Compact Blocks network messages\nBitcoin Client Side Block Filtering network messages.\nBitcoin network-related network messages.\nCreate an address message for a socket\nNetwork port\nRemove ServiceFlags from this.\nServices provided by the peer whose address this is\nExtract socket address from an Address message. This will …\nGet network magic bytes.\nGets the integer representation of this <code>ServiceFlags</code>.\nSupported networks for use in BIP155 addrv2 message\nAddress received from BIP155 addrv2 message\nA message which can be sent on the Bitcoin network\nCJDNS\nI2P\nIPV4\nIPV6\nTORV2\nTORV3\nUnknown\nNetwork ID + Network Address\nNetwork byte-order ipv6 address, or ipv4-mapped ipv6 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNetwork port\nNetwork port, 0 if not applicable\nServices provided by the peer whose address this is\nService bits\nExtract socket address from an AddrV2Message message. This …\nTime that this node was last seen as connected to the …\n<code>addr</code>\n<code>addrv2</code>\n<code>alert</code>\n<code>block</code>\nBIP152 blocktxn\nBIP157 cfcheckpt\nBIP157 cfheaders\nBIP157 cfilter\nBIP152 cmpctblock\nSerializer for command string\nError returned when a command string is invalid.\n<code>feefilter</code>\nBIP 37 <code>filteradd</code>\nBIP 37 <code>filterclear</code>\nBIP 37 <code>filterload</code>\n<code>getaddr</code>\nBIP152 getblocktxn\n<code>getblocks</code>\nBIP157 getcfcheckpt\nBIP157 getcfheaders\nBIP157 getcfilters\n<code>getdata</code>\n<code>getheaders</code>\n<code>headers</code>\n<code>inv</code>\nThe maximum number of super::message_blockdata::Inventory …\nMaximum size, in bytes, of an encoded message This by …\n<code>mempool</code>\n<code>merkleblock</code>\nA Network message payload. Proper documentation is …\n<code>notfound</code>\n<code>ping</code>\n<code>pong</code>\nA Network message\n<code>reject</code>\n<code>sendaddrv2</code>\nBIP152 sendcmpct\n<code>sendheaders</code>\ntx\nAny other message.\n<code>verack</code>\n<code>version</code>\n<code>wtxidrelay</code>\nReturn the message command as a static string reference.\nReturn the message command as a static string reference.\nReturn the CommandString for the message command.\nReturn the CommandString for the message command.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the RawNetworkMessage instance and returns the …\nMagic bytes to identify the network these messages are …\nCreates a RawNetworkMessage\nThe actual message data\nConverts <code>&amp;&#39;static str</code> to <code>CommandString</code>\nThe command of this message.\nThe payload of this message.\nBlock\nCompact Block\nError — these inventories can be ignored\nThe <code>getblocks</code> message\nThe <code>getheaders</code> message\nAn inventory item.\nTransaction\nUnknown inventory type\nWitness Transaction by Wtxid\nWitness Block\nWitness Transaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocator hashes — ordered newest to oldest. The remote …\nLocator hashes — ordered newest to oldest. The remote …\nReturn the item value represented as a SHA256-d hash.\nConstruct a new <code>getblocks</code> message\nConstruct a new <code>getheaders</code> message\nReferences the block to stop at, or zero to just fetch the …\nReferences the header to stop at, or zero to just fetch …\nThe protocol version\nThe protocol version\nThe hash of the inventory item\nThe inventory item type.\nAlways update the filter with outpoints.\nBloom filter update flags\n<code>filteradd</code> message updates the current filter with new data\n<code>filterload</code> message sets the current bloom filter\nNever update the filter with outpoints.\nOnly update the filter with outpoints if it is P2PK or P2MS\nThe data element to add to the current filter.\nThe filter itself\nControls how matched items are added to the filter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe number of hash functions to use\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA random value\nblocktxn message\ncmpctblock message\ngetblocktxn message\nsendcmpct message\nThe Compact Block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest to be send compact blocks.\nThe requested block transactions.\nThe block transactions request.\nCompact Blocks protocol version number.\ncfcheckpt message\ncfheaders message\ncfilter message\ngetcfcheckpt message\ngetcfheaders message\ngetcfilters message\nBlock hash of the Bitcoin block for which the filter is …\nThe serialized compact filter for this block\nThe filter hashes for each block in the requested range\nThe filter headers at intervals of 1,000\nFilter type for which headers are requested\nByte identifying the type of filter being returned\nByte identifying the type of filter being returned\nFilter type for which headers are requested\nFilter type for which headers are requested\nFilter type for which headers are requested\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe filter header preceding the first block in the …\nThe height of the first block in the requested range\nThe height of the first block in the requested range\nThe hash of the last block in the requested range\nThe hash of the last block in the requested range\nThe hash of the last block in the requested range\nThe hash of the last block in the requested range\nThe hash of the last block in the requested range\ncheckpoint\nduplicate message\nan output is below dust limit\ninsufficient fee\ninvalid message\nmalformed message\nnonstandard transaction\nobsolete message\nReject message might be sent by peers rejecting one of our …\nmessage rejection reason as a code\nSome simple messages The <code>version</code> message\nreason of rejection as code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreference to rejected item\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmessage type rejected\nConstructs a new <code>version</code> message with <code>relay</code> set to false\nA random nonce used to detect loops in the network\nreason of rejectection\nThe network address of the peer receiving the message\nWhether the receiving peer should relay messages to the …\nThe network address of the peer sending the message\nA bitmask describing the services supported by this node\nThe height of the maximum-work blockchain that the peer is …\nThe time at which the <code>version</code> message was sent\nA string describing the peer’s software\nThe P2P network protocol version\nError with rich context returned when a string can’t be …\nThe number of bytes equivalent per signature operation. …\nThe minimum incremental <em>feerate</em> (despite the name), in …\nDefault number of hours for an unconfirmed transaction to …\nMinimum feerate, in sats per virtual kilobyte, for a …\nThe minimum feerate, in sats per kilo-virtualbyte, for …\nMaximum number of sigops in a standard tx.\nMaximum weight of a transaction for it to be relayed by …\nMinimum non-witness size for a standard transaction (1 …\nThe virtual transaction size, as computed by default by …\nEncoding of 256-bit target as 32-bit float.\nA 256 bit integer representing target.\nA 256 bit integer representing work.\nThe <code>FeeRate</code> is too high\nAn output of type: pay-to-pubkey or pay-to-pubkey-hash.\nError in PSBT Base64 encoding.\nRequest a private key using BIP-32 fingerprint and …\nA bip32 error.\nConflicting data during combine procedure: global extended …\nSerialization error in bitcoin consensus-encoded structures\nKeys within key-value map should never be duplicated.\nKeys used to sign an ECDSA input.\nThe Elliptic Curve Digital Signature Algorithm (see …\nWays that a Partially Signed Transaction might fail.\nAn error occurred while getting the key.\nThis error is returned when extracting a <code>Transaction</code> from …\nInteger overflow in fee calculation\nTrait to get a private key from a key request, key is then …\nErrors when getting a key.\nInput index out of bounds.\nInput index out of bounds (actual index, maximum index …\nA key-value map for an input of the corresponding index in …\nThe index is out of bounds for the <code>psbt.inputs</code> vector.\nParsing error indicating invalid control block\nParsing error indicating invalid ECDSA signatures\nInvalid hash when parsing slice.\nKnown keys must be according to spec.\nParsing error indicating invalid leaf version\nMagic bytes for a PSBT must be the ASCII for “psbt” …\nThe pre-image must hash to the corresponding psbt hash\nNon-proprietary key type found when proprietary key was …\nParsing error indicating invalid public keys\nParsing error indicating invalid secp256k1 public keys\nThe separator for a PSBT must be <code>0xff</code>.\nInvalid Sighash type.\nParsing error indicating invalid taproot signatures\nParsing error indicating invalid xonly public keys\nI/O error.\nUnable to find key.\nData required to call <code>GetKey</code> to get the private key to …\nSigning algorithm and key type does not match.\nMissing input utxo.\nOne or more of the inputs lacks value information …\nMissing Redeem script.\nMissing spending utxo.\nMissing both the witness and non-witness utxo.\nMissing witness script.\nA PSBT must have an unsigned transaction.\nNegative fee\nSignals that there are no more key-value pairs in a …\nUnable to parse as a standard sighash type.\nAttempted to ECDSA sign an non-ECDSA input.\nThe GetKey operation is not supported for this key request.\nThe <code>scriptPubkey</code> is not a P2WPKH script.\nA key-value map for an output of the corresponding index …\nThe various output types supported by the Bitcoin network.\nSighash computation error (p2wpkh input).\nPSBT data is not consumed entirely\nA Partially Signed Transaction.\nError in internal PSBT data structure.\nError encountered during PSBT decoding from Base64 string.\nA Signature hash type for the corresponding input.\nReturned when output index is out of bounds in relation to …\nRequest a private key using the associated public key.\nKeys used to sign a Taproot input.\nThe Schnorr signature algorithm (see wikipedia).\nSighash computation error (segwit v0 input).\nInput value is less than Output Value, and the <code>Transaction</code> …\nA pay-to-script-hash output excluding wrapped segwit …\nA nested segwit output, pay-to-witness-pubkey-hash nested …\nA nested segwit output, pay-to-witness-script-hash nested …\nErrors encountered while calculating the sighash message.\nSigning algorithms supported by the Bitcoin network.\nMap of input index -&gt; the error encountered while …\nA list of keys used to sign an input.\nMap of input index -&gt; signing key for that input (see …\nTaproot tree deserilaization error\nParsing error indicating a taproot error\nSighash computation error (taproot input).\nA taproot output (P2TR).\nThe index is out of bounds for the <code>psbt.unsigned_tx.input</code> …\nAttempting to combine with a PSBT describing a different …\nUnable to determine the output type.\nThe scriptSigs for the unsigned transaction must be empty.\nThe scriptWitnesses for the unsigned transaction must be …\nSigning request currently unsupported.\nError related to PSBT version\nA pay-to-witness-pubkey-hash output (P2WPKH).\nAttempt to sign an input with the wrong signing algorithm.\nA pay-to-witness-script-hash output (P2WSH).\nError related to an xpub key\nA map from public keys needed to spend this output to their\nA map from public keys needed to sign this input to their …\nCombines this <code>Output</code> with <code>other</code> <code>Output</code> (as described by …\nCombines this <code>Input</code> with <code>other</code> <code>Input</code> (as described by BIP …\nReturns the <code>EcdsaSighashType</code> if the <code>PsbtSighashType</code> can be …\nObtains the <code>EcdsaSighashType</code> for this input if one is …\nThe finalized, fully-constructed scriptSig with signatures …\nThe finalized, fully-constructed scriptWitness with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>PsbtSighashType</code> from a raw <code>u32</code>.\nAttempts to get the private key for <code>key_request</code>.\nHSAH160 hash to preimage map.\nHAS256 hash to preimage map.\nThe corresponding key-value map for each input in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe non-witness transaction this input spends from. Should …\nThe corresponding key-value map for each output in the …\nA map from public keys to their corresponding signature as …\nProprietary key-value pairs for this output.\nGlobal proprietary key-value pairs.\nProprietary key-value pairs for this input.\nRaw PSBT key-value pairs.\nThe redeem script for this output.\nThe redeem script for this input.\nRIPEMD160 hash to preimage map.\nPSBT serialization.\nSHA256 hash to preimage map.\nThe sighash type to be used for this input. Signatures for …\nThe signing algorithm used to sign this output type.\nThe internal pubkey.\nTaproot Internal key.\nMap of tap root x only keys to origin info and leaf hashes …\nMap of tap root x only keys to origin info and leaf hashes …\nSerialized taproot signature with sighash type for key …\nTaproot Merkle root.\nMap of <code>&lt;xonlypubkey&gt;|&lt;leafhash&gt;</code> with signature.\nMap of Control blocks to Script version pair.\nTaproot Output tree.\nReturns the <code>TapSighashType</code> if the <code>PsbtSighashType</code> can be …\nObtains the <code>TapSighashType</code> for this input if one is …\nConverts <code>PsbtSighashType</code> to a raw <code>u32</code> sighash flag.\nUnknown key-value pairs for this output.\nUnknown global key-value pairs.\nUnknown key-value pairs for this input.\nThe unsigned transaction, scriptSigs and witnesses for …\nThe version number of this PSBT. If omitted, the version …\nThe witness script for this output.\nThe witness script for this input.\nThe transaction output this input spends from. Should only …\nA global map from extended public keys to the used key …\nActual\nExpected\nHash value\nHash-type\nPre-image\nThe <code>FeeRate</code>\nThe original <code>Psbt</code> is returned untouched.\nThe extracted <code>Transaction</code> (use this to ignore the error)\nThe extracted <code>Transaction</code> (use this to ignore the error)\nAttempted index access.\nAttempted index access.\nLength of the PBST inputs vector.\nLength of the PBST’s unsigned transaction input vector.\nA PSBT key in its raw byte form.\nA PSBT key-value pair in its raw byte form. …\nProprietary keys (i.e. keys starting with 0xFC byte) with …\nDefault implementation for proprietary key subtyping\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdditional key bytes (like serialized public key data etc)\nThe key of this key-value pair.\nThe key itself in raw byte form. …\nProprietary type prefix used for grouping together keys …\nCustom proprietary subtype\nConstructs full Key corresponding to this proprietary key …\nConstructs a <code>ProprietaryKey</code> from a <code>Key</code>.\nThe type of this PSBT key.\nThe value data of this key-value pair in raw byte form. …\nRepresents the set of all capabilities.\nRepresents the set of all capabilities (preallocated …\nA trait for all kinds of contexts that lets you define the …\nA constant description of the context.\nThe main error type for this library.\nEven parity.\nFlags for the ffi.\nSignature failed verification.\nBad EllSwift value\nBad sized message (“messages” are actually fixed-sized …\nError returned when conversion from an integer to <code>Parity</code> …\nThe only valid parity values are 0 or 1.\nBad public key.\nBad set of public keys.\nBad recovery id.\nBad secret key.\nBad shared secret.\nBad signature.\nTried to add/multiply by an invalid tweak.\nOpaque data structure that holds a keypair consisting of a …\nMaximum valid value: <code>curve_order - 1</code>\nA (hashed) message input to an ECDSA signature.\nDidn’t pass enough memory to context creation with …\nScalar representing <code>1</code>\nOdd parity.\nRepresents the parity passed between FFI function calls.\nTrait marking that a particular context object internally …\nPublic key - used to verify ECDSA signatures and to do …\nPositive 256-bit integer guaranteed to be less than the …\nThe secp256k1 engine, used to execute all signature …\nSecret key - a 256-bit key used to create ECDSA and …\nRepresents the set of capabilities needed for signing.\nRepresents the set of capabilities needed for signing …\nMarker trait for indicating that an instance of <code>Secp256k1</code> …\nTrait describing something that promises to be a 32-byte …\nMarker trait for indicating that an instance of <code>Secp256k1</code> …\nRepresents the set of capabilities needed for verification.\nRepresents the set of capabilities needed for verification …\nAn x-only public key, used for verification of Taproot …\nScalar representing <code>0</code>\nTweaks a <code>PublicKey</code> by adding <code>tweak * G</code> modulo the curve …\nTweaks a <code>SecretKey</code> by adding <code>tweak</code> modulo the curve order.\nTweaks a keypair by first converting the public key to an …\nObtains a const pointer suitable for use with FFI …\nObtains a mutable pointer suitable for use with FFI …\nObtains a raw mutable pointer suitable for use with FFI …\nObtains a raw mutable pointer suitable for use with FFI …\nObtains a raw const pointer suitable for use with FFI …\nObtains a raw const pointer suitable for use with FFI …\nGets a reference to the underlying array.\nGets a reference to the underlying array\nLike <code>cmp::Cmp</code> but faster and with no guarantees across …\nLike <code>cmp::Cmp</code> but faster and with no guarantees across …\nAdds a second key to this one, returning the sum.\nAdds the keys in the provided slice together, returning …\nConstants related to the API and the underlying curve.\nGetter for the raw pointer to the underlying secp256k1 …\nA function to deallocate the memory when the context is …\nFormats the explicit byte value of the secret key kept …\nFormats the explicit byte value of the secret key kept …\nSupport for shared secret computations.\nStructs and functionality related to the ECDSA signature …\nThis module provides an implementation of ElligatorSwift …\nThis implementation is designed to be constant time to …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a 32-byte hash directly to a secret key without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a 32-byte hash directly to a message without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to deserialize from big endian bytes\nCreates a <code>Message</code> from a <code>digest</code>.\nCreates a <code>Message</code> from a 32 byte slice <code>digest</code>.\nCreates a new public key from an <code>ElligatorSwift</code>.\nConstructs a <code>Parity</code> from a signed integer.\nCreates a new secret key using data from BIP-340 <code>Keypair</code>.\nCreates a new compressed public key using data from …\nTries to deserialize from little endian bytes\nCreates a context from a raw context.\nCreates a context from a raw context that can only be used …\nCreates a context from a raw context that can only be used …\nCreates a <code>Keypair</code> directly from a secret key slice.\nCreates a <code>Keypair</code> directly from a secret key string.\nCreates a new public key from a <code>SecretKey</code>.\nCreates a <code>Keypair</code> directly from a Secp256k1 secret key.\nConverts a <code>SECRET_KEY_SIZE</code>-byte slice to a secret key.\nCreates a public key directly from a slice.\nCreates a <code>Message</code> from a 32 byte slice <code>digest</code>.\nConstructs a <code>Parity</code> from a byte.\nCreates a <code>PublicKey</code> using the key material from <code>pk</code> …\nLets you create a context in a generic manner …\nGenerates a random keypair. Convenience function for …\nDeprecated reexport of the <code>bitcoin-hashes</code> crate.\nImplement methods and traits for types that contain an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the object into a 32-byte array\nReturns the <code>Keypair</code> for this <code>SecretKey</code>.\nTweaks a <code>SecretKey</code> by multiplying by <code>tweak</code> modulo the …\nTweaks a <code>PublicKey</code> by multiplying by <code>tweak</code> modulo the …\nNegates the secret key.\nNegates the public key.\nCreates a new Secp256k1 context with all capabilities.\nGenerates a new random secret key.\nGenerates a new random secret key.\nAttempts to erase the contents of the underlying array.\nAttempts to erase the secret within the underlying array.\nAttempts to erase the contents of the underlying array.\nUses the ffi <code>secp256k1_context_preallocated_size</code> to check …\nUses the ffi <code>secp256k1_context_preallocated_size</code> to check …\nReturns the required memory for a preallocated context …\nUses the ffi <code>secp256k1_context_preallocated_size</code> to check …\nLets you create a context with a preallocated buffer in a …\nCreates a new Secp256k1 context with all capabilities.\nCreates a new Secp256k1 context that can only be used for …\nCreates a new Secp256k1 context that can only be used for …\nReturns the <code>PublicKey</code> for this <code>SecretKey</code>.\nReturns the <code>PublicKey</code> for this <code>Keypair</code>.\nGenerates a random scalar\nGenerates a random scalar using supplied RNG\n(Re)randomizes the Secp256k1 context for extra sidechannel …\nDetermines the public key for which <code>sig</code> is a valid …\nProvides <code>Scalar</code> and related types.\nSupport for schnorr signatures.\nReturns the secret key as a byte value.\nReturns the secret bytes for this key pair.\nReturns the <code>SecretKey</code> for this <code>Keypair</code>.\n(Re)randomizes the Secp256k1 context for extra sidechannel …\nSerializes the key as a byte-encoded pair of values. In …\nSerializes the key as a byte-encoded pair of values, in …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code> and …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code>, …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code>, …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code> and …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code> and …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code> and …\nCreates a schnorr signature internally using the …\nCreates a schnorr signature without using any auxiliary …\nCreates a schnorr signature using the given auxiliary …\nCreates a schnorr signature using the given random number …\nCreates a new Secp256k1 context that can only be used for …\nTweaks private and public keys within an untweaked <code>Keypair</code> …\nSerializes to big endian bytes\nConverts parity into an integer value.\nSerializes to little endian bytes\nConverts parity into an integer (byte) value.\nCreates a new Secp256k1 context that can only be used for …\nChecks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …\nChecks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …\nVerifies a schnorr signature.\nReturns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …\nReturns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …\nReturns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …\nThe maximum size of a compact signature.\nThe order of the secp256k1 curve.\nThe size of a full ElligatorSwift encoding.\nThe Prime for the secp256k1 field element.\nThe X coordinate of the generator.\nThe Y coordinate of the generator.\nThe size of a key pair.\nThe maximum size of a signature.\nThe size (in bytes) of a message.\nThe value one as big-endian array of bytes.\nThe size (in bytes) of a serialized public key.\nThe size of a schnorr public key.\nThe size of a schnorr signature.\nThe size (in bytes) of a secret key.\nThe size (in bytes) of an serialized uncompressed public …\nThe value zero as an array of bytes.\nEnables two parties to create a shared secret without …\nFormats the explicit byte value of the shared secret kept …\nReturns the argument unchanged.\nCreates a shared secret from <code>bytes</code> array.\nCreates a shared secret from <code>bytes</code> slice.\nCalls <code>U::from(self)</code>.\nCreates a new shared secret from a pubkey and secret key.\nAttempts to erase the contents of the underlying array.\nReturns the shared secret as a byte value.\nCreates a shared point from public key and secret key.\nAn ECDSA signature with a recovery ID for pubkey recovery.\nA tag used for recovering the public key from a compact …\nA DER serialized Signature\nAn ECDSA signature\nObtains a raw mutable pointer suitable for use with FFI …\nObtains a raw mutable pointer suitable for use with FFI …\nObtains a raw pointer suitable for use with FFI functions.\nObtains a raw pointer suitable for use with FFI functions\nGet the capacity of the underlying data buffer.\nLike <code>cmp::Cmp</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a compact-encoded byte slice to a signature. This …\nConverts a 64-byte compact-encoded byte slice to a …\nConverts a DER-encoded byte slice to a signature\nConverts a “lax DER”-encoded byte slice to a …\nAllows library users to create valid recovery IDs from i32.\nCreate a SerializedSignature from a Signature. (this DER …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the space is zero.\nGet the len of the used data.\nNormalizes a signature to a “low S” form. In ECDSA, …\nSerializes the recoverable signature in compact format.\nSerializes the signature in compact format\nSerializes the signature in DER format\nImplements <code>SerializedSignature</code> and related types.\nAllows library users to convert recovery IDs to i32.\nConvert the serialized signature into the Signature struct.\nConverts a recoverable signature to a non-recoverable one …\nOwned iterator over the bytes of <code>SerializedSignature</code>\nA DER serialized Signature\nReturns the remaining bytes as a slice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nWe are the initiator of the ECDH\nWe are the responder of the ECDH\n<code>ElligatorSwift</code> is an encoding of a uniformly chosen point …\nRepresents which party we are in the ECDH, A is the …\nThe result of <code>ElligatorSwift::shared_secret</code>, which is a …\nReturns the secret bytes as a reference to an array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>ElligatorSwift</code> object from a 64-byte array.\nComputes the <code>ElligatorSwift</code> encoding for a valid public key\nCreates the Elligator Swift encoding from a secret key, …\nCreates shared secret from bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ElligatorSwift</code> object from a 64-byte array.\nComputes a shared secret only known by Alice and Bob. This …\nComputes a shared secret, just like <code>shared_secret</code>, but …\nReturns the 64-byte array representation of this …\nReturns the secret bytes as an array.\nA trait for producing pointers that will always be valid …\nA Secp256k1 context, containing various precomputed values …\nHash function to use to post-process an ECDH point to get …\nLibrary-internal representation of a ElligatorSwift …\nA hash function used by <code>ellswift_ecdh</code> to hash the final …\nA nonce generation function. Ordinary users of the library …\nNo value.\nNo value.\nNo value.\nNo value.\nLibrary-internal representation of a Secp256k1 public key\nFlag for keys to indicate compressed serialization format\nFlag for keys to indicate uncompressed serialization format\nFlag for context to enable no precomputation\nFlag for context to enable signing precomputation\nFlag for context to enable verification precomputation\nSame as secp256k1_nonce function with the exception of …\nData structure that contains additional arguments for …\nLibrary-internal representation of a Secp256k1 signature\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nGets a reference to the underlying array\nGets a reference to the underlying array\nGets a reference to the underlying array\nGets a reference to the underlying array\nGets a reference to the underlying array\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new public key usable for the FFI interface from …\nCreate a new signature usable for the FFI interface from …\nCreate a new x-only public key usable for the FFI …\nCreate a new keypair usable for the FFI interface from raw …\nImplement methods and traits for types that contain an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new SchnorrSigExtraParams properly initialized.\nCreates an “uninitialized” FFI public key which is …\nCreates an “uninitialized” FFI signature which is …\nCreates an “uninitialized” FFI x-only public key which …\nCreates an “uninitialized” FFI keypair which is zeroed …\nAttempts to erase the contents of the underlying array.\nDoes a best attempt at secure erasure using Rust …\nFFI of the recovery module\nA reimplementation of the C function …\n<strong>This function is an override for the C function, this is </strong>…\n<strong>This function is an override for the C function, this is </strong>…\nA reimplementation of the C function …\nA reimplementation of the C function …\nDefault ECDH hash function\nDefault ECDH hash function for BIP324 key establishment\nReturns the underlying FFI opaque representation of the …\nReturns the underlying FFI opaque representation of the …\nReturns the underlying FFI opaque representation of the …\nReturns the underlying FFI opaque representation of the …\nLibrary-internal representation of a Secp256k1 signature + …\nGets a reference to the underlying array\nLike <code>cmp::Ord</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new (zeroed) signature usable for the FFI …\nA type that is as aligned as the biggest alignment for …\nA static zeroed out AlignedType for use in static …\nThis might not match C’s <code>c_char</code> exactly. The way we use …\nEquivalent to C’s <code>void</code> type when used as a pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLength of the hash’s internal block size, in bytes.\nThe byte array that represents the hash internally.\nA hashing engine which bytes can be serialized into. It is …\nAttempted to create a hash from an invalid length slice.\nTrait which applies to hashes of all types.\nA hashing engine which bytes can be serialized into.\nA hash computed from a RFC 2104 HMAC. Parameterized by the …\nPair of underlying hash engines, used for the inner and …\nLength of the hash, in bytes.\nByte array representing the internal state of the hash …\nReturns an all zero hash.\nReturns a reference to the underlying byte array.\nAdds slicing traits implementations to a given type <code>$ty</code>\nConstructs a hash from the underlying byte array.\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nCreates a new newtype around a <code>Hash</code> type.\nAdds hexadecimal formatting implementation of a trait <code>$imp</code> …\nAdd data to the hash engine.\nOutputs the midstate of the hash engine. This function …\nReturn the number of bytes already …\nImplements <code>Serialize</code> and <code>Deserialize</code> for a type <code>$t</code> which …\nMacro used to define a newtype tagged hash.\nReturns the underlying byte array.\nCodes at or above this point can be used by users to …\nA marker trait used to indicate that an <code>RngCore</code> or …\nError type of random number generators\nTypes which may be filled with random data\nCodes below this point represent OS Errors (i.e. positive …\nAn automatically-implemented extension trait on <code>RngCore</code> …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nRetrieve the error code, if any.\nGenerating random samples from probability distributions\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nReturn a random value supporting the <code>Standard</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nReference the inner error (<code>std</code> only)\nCalls <code>U::from(self)</code>.\nConstruct from any type supporting <code>std::error::Error</code>\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nConvenience re-export of common members\nGenerates a random value using the thread-local random …\nExtract the raw OS error code (if this error came from the …\nRandom number generators and adapters\nSample a new value, using the given distribution.\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nSequence-related functionality\nUnwrap the inner error (<code>std</code> only)\nRetrieve the lazily-initialized thread-local random number …\nFill self with random data\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> entirely with random data.\nAll items in the provided weight collection are zero.\nSample a <code>u8</code>, uniformly distributed over ASCII letters and …\nThe Bernoulli distribution.\nError type returned from <code>Bernoulli::new</code>.\nAn iterator that generates random values of <code>T</code> with …\nA distribution of values of type <code>S</code> derived from the …\n<code>String</code> sampler\nTypes (distributions) that can be used to create a random …\n<code>p &lt; 0</code> or <code>p &gt; 1</code>.\nA weight is either less than zero, greater than the …\nThe provided weight collection contains no items.\nA distribution to sample floating point numbers uniformly …\nA distribution to sample floating point numbers uniformly …\nA distribution to sample items uniformly from a slice.\nA generic random value distribution, implemented for many …\nToo many weights are provided (length greater than <code>u32::MAX</code>…\nSample values uniformly between two bounds.\nError type returned from <code>WeightedIndex::new</code>.\nA distribution using weighted sampling of discrete items\nAppend <code>len</code> random chars to <code>string</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new <code>Bernoulli</code> with the probability of success …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nCreate a distribution of values of ‘S’ by mapping the …\nCreate a distribution of values of ‘S’ by mapping the …\nConstruct a new <code>Bernoulli</code> with the given probability of …\nCreate a new <code>Slice</code> instance which samples uniformly from …\nCreates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nCreate an iterator that generates random values of <code>T</code>, …\nCreate an iterator that generates random values of <code>T</code>, …\nGenerate a <code>String</code> of <code>len</code> random chars\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nA distribution uniformly sampling numbers within a given …\nUpdate a subset of weights, without changing the number of …\nWeighted index sampling\nHelper trait similar to <code>Borrow</code> but implemented only for …\nRange that supports generating a single sample efficiently.\nHelper trait for creating objects using the correct …\nThe <code>UniformSampler</code> implementation supporting type <code>X</code>.\nSample values uniformly between two bounds.\nThe back-end implementing <code>UniformSampler</code> for <code>char</code>.\nThe back-end implementing <code>UniformSampler</code> for <code>Duration</code>.\nThe back-end implementing <code>UniformSampler</code> for …\nThe back-end implementing <code>UniformSampler</code> for integer types.\nHelper trait handling actual uniform sampling.\nThe type sampled by this implementation.\nImmutably borrows from an owned value. See <code>Borrow::borrow</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the range is empty.\nConstruct self, with inclusive lower bound and exclusive …\nConstruct self, with inclusive bounds <code>[low, high]</code>.\nSample a value.\nGenerate a sample from the given range.\nSample a single value uniformly from a range with …\nSample a single value uniformly from a range with …\nAll items in the provided weight collection are zero.\nA weight is either less than zero, greater than the …\nThe provided weight collection contains no items.\nToo many weights are provided (length greater than <code>u32::MAX</code>…\nError type returned from <code>WeightedIndex::new</code>.\nA distribution using weighted sampling of discrete items\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA marker trait used to indicate that an <code>RngCore</code> or …\nTypes (distributions) that can be used to create a random …\nThe element type.\nExtension trait on iterators, providing random sampling …\nAn automatically-implemented extension trait on <code>RngCore</code> …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nExtension trait on slices, providing random mutation and …\nThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …\nA reference to the thread-local generator\nReturns a reference to one random element of the slice, or …\nChoose one element at random from the iterator.\nChoose one element at random from the iterator.\nChooses <code>amount</code> elements from the slice at random, without …\nCollects <code>amount</code> values at random from the iterator into a …\nCollects <code>amount</code> values at random from the iterator into a …\nCollects values at random from the iterator into a …\nCollects values at random from the iterator into a …\nSimilar to <code>choose_multiple</code>, but where the likelihood of …\nReturns a mutable reference to one random element of the …\nChoose one element at random from the iterator.\nChoose one element at random from the iterator.\nSimilar to <code>choose</code>, but where the likelihood of each …\nSimilar to <code>choose_mut</code>, but where the likelihood of each …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nReturn a random value supporting the <code>Standard</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nShuffle a slice in place, but exit early.\nGenerates a random value using the thread-local random …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nSample a new value, using the given distribution.\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nShuffle a mutable slice in place.\nRetrieve the lazily-initialized thread-local random number …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> entirely with random data.\nA random number generator that retrieves randomness from …\nThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …\nA reference to the thread-local generator\nWrappers / adapters forming RNGs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMock random number generator\n<code>ReadRng</code> error type\nAn RNG that reads random bytes straight from any type …\nA wrapper around any PRNG that implements <code>BlockRngCore</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ReadRng</code> from a <code>Read</code>.\nCreate a new <code>ReseedingRng</code> from an existing PRNG, combined …\nReseed the internal PRNG.\nA simple implementation of <code>RngCore</code> for testing purposes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a <code>StepRng</code>, yielding an arithmetic sequence starting …\nThe element type.\nExtension trait on iterators, providing random sampling …\nAn iterator over multiple slice elements.\nExtension trait on slices, providing random mutation and …\nReturns a reference to one random element of the slice, or …\nChooses <code>amount</code> elements from the slice at random, without …\nSimilar to <code>choose_multiple</code>, but where the likelihood of …\nReturns a mutable reference to one random element of the …\nSimilar to <code>choose</code>, but where the likelihood of each …\nSimilar to <code>choose_mut</code>, but where the likelihood of each …\nReturns the argument unchanged.\nLow-level API for sampling indices\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nShuffle a slice in place, but exit early.\nShuffle a mutable slice in place.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nA vector of indices.\nReturn type of <code>IndexVec::into_iter</code>.\nReturn type of <code>IndexVec::iter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the value at the given <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert into an iterator over the indices as a sequence of …\nReturn result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …\nReturns <code>true</code> if the length is 0.\nIterate over the indices as a sequence of <code>usize</code> values\nReturns the number of indices\nRandomly sample exactly <code>amount</code> distinct indices from …\nRandomly sample exactly <code>amount</code> distinct indices from …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nError returned when the value of scalar is invalid - …\nPositive 256-bit integer guaranteed to be less than the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a schnorr signature.\nGets a reference to the underlying array\nReturns the argument unchanged.\nCreates a <code>Signature</code> directly from a slice.\nCalls <code>U::from(self)</code>.\nReturns a signature as a byte array.\nWhen <code>SIGHASH_ANYONECANPAY</code> is not provided, or when the …\n0x1: Sign all outputs.\n0x1: Sign all outputs.\n0x81: Sign all outputs but only this input.\n0x81: Sign all outputs but only this input.\nThe <code>Annex</code> struct is a slice wrapper enforcing first byte …\nAnnex must be at least one byte long and the first bytes …\n0x0: Used when not explicitly specified, defaults to …\nHashtype of an input’s signature, encoded in the last …\nThe annex is empty.\nResult of <code>SighashCache::legacy_encode_signing_data_to</code>.\nIncorrect prefix byte in the annex.\nIndex out of bounds when accessing transaction input …\nInvalid index when accessing a <code>Prevouts::All</code> kind.\nInvalid index when accessing a <code>Prevouts::One</code> kind.\nInvalid Sighash type.\nInteger is not a consensus valid sighash type.\nCan happen only when using <code>*_encode_signing_*</code> methods with …\nHash of a transaction according to the legacy signature …\nThis type is consensus valid but an input including it …\n0x2: Sign no outputs — anyone can choose the destination.\n0x2: Sign no outputs — anyone can choose the destination.\n0x82: Sign no outputs and only this input.\n0x82: Sign no outputs and only this input.\nScript is not a witness program for a p2wpkh output.\n<code>One</code> variant allows provision of the single prevout needed. …\nError computing a P2WPKH sighash.\nContains outputs of previous transactions. In the case …\nPrevouts index error.\n<code>Prevouts</code> index related errors.\nPrevouts kind error.\nA single prevout was been provided but all prevouts are …\nPrevouts size error.\nThe number of supplied prevouts differs from the number of …\nInformation related to the script path spending.\nHash of a transaction according to the segwit version 0 …\nError computing the sighash.\nAn argument to the called sighash function was invalid.\nEfficiently calculates signature hash message for legacy, …\nInput data is an instance of <code>SIGHASH_SINGLE</code> bug\nError returned for failure during parsing one of the …\nError returned when writing signing data fails.\n0x3: Sign the output whose index matches this input’s …\n0x3: Sign the output whose index matches this input’s …\nUsing <code>SIGHASH_SINGLE</code> requires an output at the same index …\nUsing <code>SIGHASH_SINGLE</code> requires an output at the same index …\n0x83: Sign one output and only this input (see <code>Single</code> for …\n0x83: Sign one output and only this input (see <code>Single</code> for …\nTaproot-tagged hash with tag &quot;TapSighash&quot;.\nThe tag used for <code>TapSighash</code>\nHashtype of an input’s signature, encoded in the last …\nError computing a taproot sighash.\nOperation performed normally.\nReturns the Annex bytes data (including first byte <code>0x50</code>).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInput index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestroys the cache and recovers the stored transaction.\nChecks for SIGHASH_SINGLE bug returning error if the …\nComputes the leaf hash for this <code>ScriptPath</code>.\nEncodes the legacy signing data from which a signature …\nComputes a legacy signature hash for a given input index …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …\nConstructs a new <code>SighashCache</code> from an unsigned transaction.\nCreates a new <code>ScriptPath</code> structure.\nCreates a new <code>Annex</code> struct checking the first byte is <code>0x50</code>.\nLength of the output vector.\nComputes the BIP143 sighash to spend a p2wpkh transaction …\nComputes the BIP143 sighash to spend a p2wsh transaction …\nEncodes the BIP143 signing data for any flag type into a …\nEncodes the BIP341 signing data for any flag type into a …\nComputes the BIP341 sighash for a key spend.\nComputes the BIP341 sighash for a script spend.\nComputes the BIP341 sighash for any flag type.\nReturns the reference to the cached transaction.\nThe unrecognized string we attempted to parse.\nCreates a new <code>ScriptPath</code> structure using default leaf …\nAllows modification of witnesses.\nThe prefix for signed messages using Bitcoin’s message …\nInvalid base64 encoding.\nThe signature is invalidly constructed.\nSignature is expected to be 65 bytes.\nA signature on a Bitcoin Signed Message.\nAn error used for dealing with Bitcoin Signed Messages.\nUnsupported Address Type\nWhether or not this signature was created with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a signature from base64 encoding.\nCreate from a byte slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify that the signature signs the message and was signed …\nCreate a new MessageSignature.\nAttempt to recover a public key from the signature and the …\nSerialize to bytes.\nThe inner recoverable signature.\nHash message for signature using Bitcoin’s message …\nConvert to base64 encoding.\nControl block data structure used in Tapscript …\nCalled finalize on a empty tree.\nEmpty tap tree.\nFuture leaf version.\nInner type representing future (non-tapscript) leaf …\nHidden Node with the given leaf hash\nError happening when <code>TapTree</code> is constructed from a <code>NodeInfo</code>\nIndicates an attempt to construct a tap tree from a …\nIndicates an attempt to construct a tap tree from a …\nError happening when <code>TapTree</code> is constructed from a …\nInvalid control block size.\nInvalid taproot internal key.\nInvalid taproot internal key.\nProof size must be a multiple of 32.\nMerkle tree depth must not be more than 128.\nMerkle tree depth must not be more than 128.\nInvalid taproot signature size\nThe last bit of tapleaf version must be zero.\nStore information about taproot leaf node.\nIterator for a taproot script tree, operating in DFS order …\nThe leaf version for tapleafs.\nRepresents the node information in taproot tree. In …\nNodes must be added specified in DFS walk order.\nIndicates an attempt to construct a tap tree from a …\nTwo nodes at depth 0 are not allowed.\nA known script\nScript leaf node in a taproot tree along with the merkle …\nIterator for a taproot script tree, operating in DFS order …\nA secp256k1 error.\nAn error constructing a <code>taproot::Signature</code> from a byte …\nInvalid signature hash type.\nA BIP340-341 serialized taproot signature with the …\nTaproot annex prefix.\nTapscript control base size.\nMaximum depth of a taproot tree script spend path.\nTapscript control max size.\nSize of a taproot control node.\nTapleaf mask for getting the leaf version from first byte …\nTapscript leaf version.\nThe tag used for <code>TapNodeHash</code>\nLeaf node in a taproot tree. Can be either hidden or known.\nTaproot-tagged hash with tag &quot;TapLeaf&quot;.\nThe tag used for <code>TapLeafHash</code>\nTagged hash used in taproot trees.\nBIP-342 tapscript.\nTaproot Tree representing a complete binary tree without …\nTaproot-tagged hash with tag &quot;TapTweak&quot;.\nThe tag used for <code>TapTweakHash</code>\nBuilder for building taproot iteratively. Users can …\nDetailed error type for taproot builder.\nDetailed error type for taproot utilities.\nThe merkle proof for inclusion of a tree in a taptree hash.\nRepresents taproot spending information.\nAdds a hidden/omitted node at <code>depth</code> to the builder. Errors …\nAdds a leaf script at <code>depth</code> to the builder with default …\nAdds a leaf script at <code>depth</code> to the builder with script …\nObtains the hidden leaf hash if the leaf is hidden.\nReturns a reference to the slice of hashes.\nObtains a reference to script and version if the leaf is …\nReturns a reference to the slice of hashes.\nCombines two <code>NodeInfo</code> to create a new parent.\nConstructs a <code>ControlBlock</code> for particular script with the …\nDecodes bytes from control block.\nDecodes bytes representing a <code>ControlBlock</code>.\nReturns the depth of this script leaf in the tap tree.\nSerializes to a writer.\nSerializes to a writer.\nCreates a <code>TaprootSpendInfo</code> with the given internal key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>LeafVersion</code> from consensus byte representation.\nObtains a script leaf from the leaf node if the leaf is …\nComputes the <code>TaprootSpendInfo</code> from <code>internal_key</code> and <code>node</code>.\nDeserialize from slice\nChecks if the builder has hidden nodes.\nReturns the internal key for this <code>TaprootSpendInfo</code>.\nThe internal key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts error into the original incomplete <code>TaprootBuilder</code> …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns the inner list of hashes.\nConverts error into the original incomplete <code>NodeInfo</code> …\nGets the inner <code>NodeInfo</code> of this tree root.\nReturns the list of hashes stored in a <code>Vec</code>.\nChecks if this merkle proof is empty.\nChecks if the builder has finalized building a tree.\nReturns a reference to the leaf of this <code>ScriptLeaf</code>.\nComputes a leaf hash for this <code>ScriptLeaf</code> if the leaf is …\nCreates an iterator over all leaves (including hidden …\nReturns leaf version of the script if the leaf is known.\nThe tapleaf version.\nReturns the number of nodes in this merkle proof.\nContains <code>TaprootMerkleBranch</code> and its associated types.\nReturns reference to the merkle proof (hashing partners) …\nObtains a reference to the merkle proof of the leaf.\nThe merkle proof of a script associated with this leaf.\nReturns the merkle root for this <code>TaprootSpendInfo</code>.\nCreates a new instance of <code>TaprootBuilder</code>.\nCreates an new <code>ScriptLeaf</code> from <code>hash</code> and no merkle branch.\nCreates a new <code>NodeInfo</code> with omitted/hidden info.\nCreates a new key spend with <code>internal_key</code> and <code>merkle_root</code>. …\nCreates a new leaf <code>NodeInfo</code> with given <code>ScriptBuf</code> and …\nCreates an new <code>ScriptLeaf</code> from <code>script</code> and <code>ver</code> and no …\nReturns the root <code>TapNodeHash</code> of this node info.\nComputes the <code>TapNodeHash</code> for this <code>ScriptLeaf</code>. This returns …\nGets the reference to inner <code>NodeInfo</code> of this tree root.\nReturns the output key (the key used in script pubkey) for …\nReturns the parity of the output key. See also …\nThe parity of the output key (NOT THE INTERNAL KEY WHICH …\nReturns the root <code>TapNodeHash</code> of this tree.\nReturns reference to the leaf script if the leaf is known.\nObtains a reference to the script inside the leaf.\nReturns [<code>TapTreeIter&lt;&#39;_&gt;</code>] iterator for a taproot script …\nReturns a reference to the internal script map.\nSerializes the signature (without heap allocation)\nSerializes <code>self</code> as bytes.\nSerializes the control block.\nSerializes the signature to <code>writer</code>.\nImplements <code>SerializedSignature</code> and related types.\nThe corresponding hash type.\nThe underlying schnorr signature.\nReturns the size of control block. Faster and more …\nReturns the <code>TapTweakHash</code> for this <code>TaprootSpendInfo</code> i.e., …\nReturns the consensus representation of this …\nReturns the consensus representation of this <code>LeafVersion</code>.\nSerialize Signature\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nCreates a merkle proof from list of hashes.\nCreates a merkle proof from list of hashes.\nCreates a merkle proof from list of hashes.\nConstructs <code>TapTree</code> from a <code>TaprootBuilder</code> if it is complete …\nConstructs <code>TapTree</code> from a <code>NodeInfo</code> if it is complete …\nConverts the builder into a <code>NodeInfo</code> if the builder is a …\nConverts the builder into a <code>TapTree</code> if the builder is a …\nVerifies that a control block is correct proof for a given …\nObtains the version of the script leaf.\nCreates a new instance of <code>TaprootBuilder</code> with a capacity …\nCreates a new <code>TaprootSpendInfo</code> from a list of scripts …\nCreates a new <code>TaprootSpendInfo</code> from a list of scripts …\nIterator over node hashes within Taproot merkle branch.\nThe merkle proof for inclusion of a tree in a taptree hash.\nReturns the remaining items of this iterator as a mutable …\nReturns the remaining items of this iterator as a slice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nOwned iterator over the bytes of <code>SerializedSignature</code>\nA serialized Taproot Signature\nReturns the remaining bytes as a slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a SerializedSignature from a Signature. (this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nGet the len of the used data.\nConvert the serialized signature into the Signature struct.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nWrites this serialized signature to a <code>writer</code>.\nRepresents changes to an <code>IndexedTxGraph</code>.\nThe <code>IndexedTxGraph</code> combines a <code>TxGraph</code> and an <code>Indexer</code> …\nBatch insert all transactions of the given <code>block</code> of <code>height</code>.\nBatch insert all transactions of the given <code>block</code> of <code>height</code>…\nApplies the <code>ChangeSet</code> to the <code>IndexedTxGraph</code>.\nApply an <code>update</code> directly.\nApply the given <code>update</code> with an optional <code>seen_at</code> timestamp.\nBatch insert transactions, filtering out those that are …\nBatch insert unconfirmed transactions, filtering out those …\nBatch insert unconfirmed transactions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference of the internal transaction graph.\nTransaction index.\n<code>Indexer</code> changeset.\nDetermines the <code>ChangeSet</code> between <code>self</code> and an empty …\nInsert an <code>anchor</code> for a given transaction.\nInsert a unix timestamp of when a transaction is seen in …\nInsert and index a transaction into the graph.\nInsert a floating <code>txout</code> of given <code>outpoint</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>IndexedTxGraph</code> with a given <code>index</code>.\n<code>TxGraph</code> changeset.\nThe resultant “changeset” when new transaction data is …\nUtilities for indexing transaction data.\nApply changeset to itself.\nScans a transaction for relevant outpoints, which are …\nScan and index the given <code>outpoint</code> and <code>txout</code>.\nDetermines the <code>ChangeSet</code> between <code>self</code> and an empty <code>Indexer</code>.\nDetermines whether the transaction should be included in …\n<code>KeychainTxOutIndex</code> controls how script pubkeys are …\n<code>SpkTxOutIndex</code> is an index storing <code>TxOut</code>s that have a …\nRepresents updates to the derivation index of a …\nThe default lookahead for a <code>KeychainTxOutIndex</code>\nThe descriptor has already been assigned to a keychain so …\nTrait to extend <code>FullScanRequestBuilder</code>.\nError returned from <code>KeychainTxOutIndex::insert_descriptor</code>\nThe keychain is already assigned to a descriptor so you can…\n<code>KeychainTxOutIndex</code> controls how script pubkeys are …\nName for table that stores last revealed indices per …\nSchema name for the changeset.\nTrait to extend <code>SyncRequestBuilder</code>.\nGet unbounded spk iterators for all keychains.\nApplies the <code>ChangeSet&lt;K&gt;</code> to the <code>KeychainTxOutIndex&lt;K&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct <code>KeychainTxOutIndex</code> from sqlite database and …\nGets the descriptor associated with the keychain. Returns …\nReturns the keychain and keychain index associated with …\nInitialize sqlite tables for persisting <code>KeychainTxOutIndex</code>.\nInsert a descriptor with a keychain associated to it.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the changeset are empty.\nReturns whether the spk under the <code>keychain</code>’s <code>index</code> has …\nIterate over all <code>OutPoint</code>s that have <code>TxOut</code>s with script …\nIterate over <code>OutPoint</code>s that have script pubkeys derived …\nReturn all keychains and their corresponding descriptors.\nContains for each descriptor_id the last revealed index of …\nGet the last derivation index revealed for <code>keychain</code>. …\nGet the last derivation index that is revealed for each …\nReturns the highest derivation index of the <code>keychain</code> where …\nReturns the highest derivation index of each keychain that …\nGet the lookahead setting.\nStore lookahead scripts until <code>target_index</code> (inclusive).\nMarks the script pubkey at <code>index</code> as used even though the …\nMerge another <code>ChangeSet</code> into self.\nComputes the net value that this transaction gives to the …\nConstruct a <code>KeychainTxOutIndex</code> with the given <code>lookahead</code>.\nGet the next derivation index for <code>keychain</code>. The next index …\nGets the next unused script pubkey in the keychain. I.e., …\nGet the set of indexed outpoints, corresponding to tracked …\nPersist <code>changeset</code> to the sqlite database.\nAttempts to reveal the next script pubkey for <code>keychain</code>.\nReveals script pubkeys of the <code>keychain</code>’s descriptor <strong>up </strong>…\nConvenience method to call <code>Self::reveal_to_target</code> on …\nIterate over revealed spks of the given <code>keychain</code> with …\nIterate over revealed spks of keychains in <code>range</code>\nAdd <code>Script</code>s that are revealed by the <code>indexer</code> of the given …\nGet v0 of sqlite keychain_txout::ChangeSet schema\nComputes the total value transfer effect <code>tx</code> has on the …\nReturn the script that exists under the given <code>keychain</code>’s …\nAdd spk iterators for each keychain tracked in <code>indexer</code>.\nReturn the <code>TxOut</code> of <code>outpoint</code> if it has been indexed, and …\nIterate over known txouts that spend to tracked script …\nFinds all txouts on a transaction that has previously been …\nGet an unbounded spk iterator over a given <code>keychain</code>. …\nUndoes the effect of <code>mark_used</code>. Returns whether the <code>index</code> …\nIterate over revealed, but unused, spks of the given …\nIterate over revealed, but unused, spks of all keychains.\nAdd <code>Script</code>s that are revealed by the <code>indexer</code> but currently …\nThe descriptor you have attempted to reassign\nThe keychain that the descriptor is already assigned to\nThe descriptor that the keychain is already assigned to\nThe keychain that you have attempted to reassign\nAn index storing <code>TxOut</code>s that have a script pubkey that …\nThe script pubkeys that are being tracked by the index.\nReturns the argument unchanged.\nReturns the index associated with the script pubkey.\nAdds a script pubkey to scan for. Returns <code>false</code> and does …\nCalls <code>U::from(self)</code>.\nWhether any of the inputs of this transaction spend a …\nReturns whether the script pubkey at <code>index</code> has been used …\nMarks the script pubkey at <code>index</code> as used even though it …\nComputes the net value transfer effect of <code>tx</code> on the script …\nGet a reference to the set of indexed outpoints.\nIterates over all the outputs with script pubkeys in an …\nScans a transaction’s outputs for matching script …\nScan a single <code>TxOut</code> for a matching script pubkey and …\nComputes the total value transfer effect <code>tx</code> has on the …\nReturns the script that has been inserted at the <code>index</code>.\nReturns the txout and script pubkey index of the <code>TxOut</code> at …\nIterate over all known txouts that spend to tracked script …\nFinds all txouts on a transaction that has previously been …\nUndoes the effect of <code>mark_used</code>. Returns whether the <code>index</code> …\nIterates over all unused script pubkeys in an index range.\nRepresents a failure when trying to insert/remove a …\nThe error type for <code>LocalChain::apply_header_connected_to</code>.\nName of sqlite table that stores blocks of <code>LocalChain</code>.\nOccurs when the update cannot connect with the original …\nOccurs when an update does not have a common checkpoint …\nThe <code>ChangeSet</code> represents changes to <code>LocalChain</code>.\nA checkpoint is a node of a reference-counted linked list …\nIterates over checkpoints backwards.\nOccurs when <code>connected_to</code> block conflicts with either the …\nThis is a local implementation of <code>ChainOracle</code>.\nAn error which occurs when a <code>LocalChain</code> is constructed …\nSchema name for the changeset.\nApply the given <code>changeset</code>.\nUpdate the chain with a given <code>Header</code> connecting it with …\nUpdate the chain with a given <code>Header</code> at <code>height</code> which you …\nApplies the given <code>update</code> to the chain.\nChanges to the <code>LocalChain</code> blocks.\nRemoves blocks from (and inclusive of) the given <code>block_id</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>LocalChain</code> from a <code>BTreeMap</code> of height to …\nConstruct a <code>LocalChain</code> from an initial <code>changeset</code>.\nConstruct <code>LocalChain</code> from genesis <code>hash</code>.\nConstruct a <code>LocalChain</code> from sqlite database.\nConstruct a <code>LocalChain</code> from a given <code>checkpoint</code> tip.\nGet the genesis hash.\nGet checkpoint at given <code>height</code> (if it exists).\nThe checkpoint’s height.\nInitialize sqlite tables for persisting …\nDerives an initial <code>ChangeSet</code>, meaning that it can be …\nInsert a <code>BlockId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over checkpoints in descending height order.\nThe original checkpoint’s block hash which cannot be …\nPersist <code>changeset</code> to the sqlite database.\nIterate checkpoints over a height range.\nGet v0 of sqlite local_chain::ChangeSet schema\nGet the highest checkpoint.\nThe suggested checkpoint to include to connect the two …\nThe attempted update to the <code>original_block</code> hash.\nTable name for schemas.\nRuns logic that initializes/migrates the table schemas.\nData required to perform a spk-based blockchain client …\nBuilds a <code>FullScanRequest</code>.\nData returned from a spk-based blockchain client full scan.\nOutpoint sync item.\nScript pubkey sync item.\nAn item reported to the <code>inspect</code> closure of <code>SyncRequest</code>.\nThe progress of <code>SyncRequest</code>.\nData required to perform a spk-based blockchain client …\nBuilds a <code>SyncRequest</code>.\nData returned from a spk-based blockchain client sync.\nTxid sync item.\nBuild the <code>SyncRequest</code>.\nBuild the <code>FullScanRequest</code>.\nStart building a <code>SyncRequest</code>.\nStart building a <code>FullScanRequest</code>.\nSet the initial chain tip for the sync request.\nGet the chain tip <code>CheckPoint</code> of this request (if any).\nSet the initial chain tip for the full scan request.\nGet the chain tip <code>CheckPoint</code> of this request (if any).\nChanges to the chain discovered during the scan.\nChanges to the chain discovered during the scan.\nTotal consumed items of the request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the closure that will inspect every sync item visited.\nSet the closure that will inspect every sync item visited.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over <code>OutPoint</code>s contained in this request.\nIterate over <code>ScriptBuf</code>s contained in this request.\nIterate over indexed <code>ScriptBuf</code>s contained in this request …\nIterate over <code>Txid</code>s contained in this request.\nList all keychains contained in this request.\nLast active indices for the corresponding keychains (<code>K</code>). …\nAdvances the sync request and returns the next <code>OutPoint</code>.\nAdvances the sync request and returns the next <code>ScriptBuf</code>.\nAdvances the full scan request and returns the next …\nAdvances the sync request and returns the next <code>Txid</code>.\nAdd <code>OutPoint</code>s that will be synced against.\nOutpoints consumed by the request.\nOutpoints remaining in the request.\nGet the <code>SyncProgress</code> of this request.\nTotal remaining items of the request.\nAdd <code>Script</code>s that will be synced against.\nScript pubkeys consumed by the request.\nSet the spk iterator for a given <code>keychain</code>.\nScript pubkeys remaining in the request.\nAdd <code>Script</code>s coupled with associated indexes that will be …\nTotal items, consumed and remaining, of the request.\nTotal outpoints, consumed and remaining, of the request.\nTotal script pubkeys, consumed and remaining, of the …\nTotal txids, consumed and remaining, of the request.\nRelevant transaction data discovered during the scan.\nRelevant transaction data discovered during the scan.\nAdd <code>Txid</code>s that will be synced against.\nTxids consumed by the request.\nTxids remaining in the request.\nName of table that stores <code>Anchor</code>s.\nErrors returned by <code>TxGraph::calculate_fee</code>.\nA transaction that is deemed to be part of the canonical …\nThe <code>ChangeSet</code> represents changes to a <code>TxGraph</code>.\nMissing <code>TxOut</code> for one or more of the inputs of the tx\nWhen the transaction is invalid according to the graph it …\nSchema name for <code>tx_graph::ChangeSet</code>.\nName of table that stores floating txouts.\nName of table that stores full transactions and <code>last_seen</code> …\nAn iterator that traverses ancestors of a given root …\nAn iterator that traverses transaction descendants.\nA graph of transactions and spends.\nA transaction node in the <code>TxGraph</code>.\nData object used to communicate updates about relevant …\nGet all transaction anchors known by <code>TxGraph</code>.\nIterate over all tx outputs known by <code>TxGraph</code>.\nIterates over the heights of that the new transaction …\nTransaction anchors. Anchors tells us a position in the …\nThe blocks that the transaction is “anchored” in.\nAdded anchors.\nApplies <code>ChangeSet</code> to <code>TxGraph</code>.\nExtends this graph with the given <code>update</code>.\nExtends this graph with the given <code>update</code> alongside an …\nGet the total balance of <code>outpoints</code> that are in <code>chain</code> of …\nBatch insert unconfirmed transactions.\nCalculates the fee of a given transaction. Returns …\nReturns a <code>CanonicalIter</code>.\nHow the transaction is observed in the canonical chain …\nGiven a transaction, return an iterator of txids that …")