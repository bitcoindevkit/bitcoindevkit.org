searchState.loadedDescShard("bdk_chain", 0, "This crate is a collection of core structures for Bitcoin …\nTrait that “anchors” blockchain data to a specific …\nAn <code>Anchor</code> that can be constructed from a given block, …\nA wrapper that we use to impl remote traits for types in …\nMaximum BIP32 derivation index.\nBalance, differentiated into various categories.\nA reference to a block in the canonical chain.\nHow many confirmations are needed f or a coinbase output …\nRepresents a service that tracks the blockchain.\nRepresents the observed position of some chain data.\nA checkpoint is a node of a reference-counted linked list …\nIterates over checkpoints backwards.\nRepresents the confirmation block and time of a …\nBlock height and timestamp at which a transaction is …\nThe chain data is seen as confirmed, and in anchored by <code>A</code>.\nThe transaction is confirmed\nA trait to extend the functionality of a miniscript …\nRepresents the unique ID of a descriptor.\nError type.\nA <code>TxOut</code> with as much data as we can retrieve about it\nA wrapper that we use to impl remote traits for types in …\nA tuple of keychain index and <code>T</code> representing the indexed …\nA tuple of keychain <code>K</code>, derivation index (<code>u32</code>) and a <code>T</code> …\nTrait that makes an object mergeable.\nAn iterator for derived script pubkeys.\nData object used to communicate updates about relevant …\nThe chain data is not confirmed and last seen in the …\nThe transaction is unconfirmed\nReturns the <code>BlockId</code> that the associated blockchain data is …\nTransaction anchors. Anchors tells us a position in the …\nReturns a reference to the inner hash (sha256, sh256d …\nGet the <code>BlockId</code> of the checkpoint.\nThe anchor block.\nThe position of the transaction in <code>outpoint</code> in the overall …\nMaps a <code>ChainPosition&lt;&amp;A&gt;</code> into a <code>ChainPosition&lt;A&gt;</code> by …\nGet the upper bound of the chain data’s confirmation …\nGet the upper bound of the chain data’s confirmation …\nDetermines the upper bound of the confirmation height.\nThe confirmation time of the transaction being anchored.\nConfirmed and immediately spendable balance\nGet a reference to the internal descriptor.\nReturns the descriptor ID, calculated as the sha256 hash …\nReturns the minimum value (in satoshis) at which an output …\nThis method tests for <code>self</code> and <code>other</code> to have equal …\nExtends the checkpoint linked list by a iterator of block …\nExtend this update with <code>other</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a checkpoint from a list of <code>BlockId</code>s in …\nConstruct the anchor from a given <code>block</code>, block height and …\nConstruct a checkpoint from the given <code>header</code> and block …\nCreates this wrapper type from the inner hash type.\nGet checkpoint at <code>height</code>.\nGet the best chain’s chain tip.\nGet the block hash of the checkpoint.\nThe hash of the block.\nGet the height of the checkpoint.\nThe height of the block.\nAll coinbase outputs not yet matured\nContains the <code>IndexedTxGraph</code> and associated types. Refer to …\n<code>Indexer</code> provides utilities for indexing transaction data.\nInserts <code>block_id</code> at its height within the chain.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns the inner <code>T</code>.\nReturns the inner <code>T</code>.\nDetermines whether <code>block</code> of <code>BlockId</code> exists as an ancestor …\nReturns whether <code>ChainPosition</code> is confirmed or not.\nReturns whether <code>ConfirmationTime</code> is the confirmed variant.\nWhether the utxo is/was/will be spendable with chain <code>tip</code>.\nReturns whether the structure is considered empty.\nWhether the <code>txout</code> is considered mature.\nWhether this output is on a coinbase transaction.\nIterate from this checkpoint in descending height.\nThe <code>LocalChain</code> is a local implementation of <code>ChainOracle</code>.\nTransforms the <code>TxUpdate</code> to have <code>anchors</code> (<code>A</code>) of another …\nMerge another object of the same type onto <code>self</code>.\nConstruct a new base block at the front of a linked list.\nCreate a new script pubkey iterator from <code>descriptor</code>.\nCreate a new script pubkey iterator from <code>descriptor</code> and a …\nThe location of the <code>TxOut</code>.\nGet the previous checkpoint in the chain\nPuts another checkpoint onto the linked list representing …\nIterate checkpoints over a height range.\nModule for stuff\nSeen at times for transactions. This records when a …\nThe txid and chain position of the transaction (if any) …\nHelper types for spk-based blockchain clients.\nTake the value, replacing it with the default value.\nReturns the inner hash (sha256, sh256d etc.).\nGet the whole balance visible to the wallet.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nUnconfirmed UTXOs generated by a wallet tx\nGet sum of trusted_pending and confirmed coins.\nModule for structures that store and traverse transactions.\nThe <code>TxOut</code>.\nFloating txouts. These are <code>TxOut</code>s that exist but the whole …\nFull transactions. These are transactions that were …\nConstruct an unconfirmed variant using the given <code>last_seen</code> …\nUnconfirmed UTXOs received from an external wallet\nConfirmation height.\nThe last-seen timestamp in unix seconds.\nConfirmation time in unix seconds.\nA Bitcoin address.\nThe different types of addresses.\n0x1: Sign all outputs.\n0x1: Sign all outputs.\n0x81: Sign all outputs but only this input.\n0x81: Sign all outputs but only this input.\nAmount\nMinimum fee rate required to broadcast a transaction.\nConvenience alias for <code>Denomination::Bitcoin</code>.\nbits\nBTC\nMainnet Bitcoin.\nBitcoin block.\nA bitcoin block hash.\ncBTC\nEncoding of 256-bit target as 32-bit float.\nAn always-compressed Bitcoin ECDSA public key\nThe default <code>max_fee_rate</code> value used for extracting …\nFee rate used to compute dust amount.\n0x0: Used when not explicitly specified, defaults to …\nA set of denominations in which amounts can be expressed.\nThe sequence number that enables absolute lock time but …\nThe sequence number that enables replace-by-fee and …\nHashtype of an input’s signature, encoded in the last …\nRepresents fee rate.\nFilter hash, as defined in BIP-157\nFilter header, as defined in BIP-157\nKnown bech32 human-readable parts.\nHash of a transaction according to the legacy signature …\nThe maximum value of an amount.\nThe maximum value of an amount.\nMaximum possible value.\nMaximum possible value.\nThe maximum allowable sequence number.\nThe maximum possible target.\nThe maximum <strong>attainable</strong> target value on mainnet.\nThe proof of work limit on regtest.\nThe proof of work limit on signet.\nThe proof of work limit on testnet.\nThe maximum allowed weight for a block, see BIP 141 …\nThe maximum value allowed as an amount. Useful for sanity …\nThe maximum value allowed as an amount. Useful for sanity …\nMaximum transaction weight for Bitcoin Core 25.0.\nThe minimum value of an amount.\nThe minimum value of an amount.\nMinimum possible value (0 sat/kwu).\nMinimum possible value (0 wu).\nThe minimum transaction weight for a valid serialized …\nThe Bitcoin mainnet network.\nThe main Bitcoin network.\nData structure that represents a block header paired to a …\nuBTC\nmBTC\nmsat\nThis is used as a “null txout” in consensus signing …\nnBTC\nThe cryptocurrency network to act on.\nWhat kind of network we are on.\n0x2: Sign no outputs — anyone can choose the destination.\n0x2: Sign no outputs — anyone can choose the destination.\n0x82: Sign no outputs and only this input.\n0x82: Sign no outputs and only this input.\nExactly one bitcoin.\nExactly one bitcoin.\nExactly one satoshi.\nExactly one satoshi.\nA script Opcode.\nA reference to a transaction output.\nPay to pubkey hash.\nPay to script hash.\nPay to taproot.\nPay to witness pubkey hash.\nPay to witness script hash.\npBTC\nA Bitcoin ECDSA private key\nA Partially Signed Transaction.\nA hash of a public key.\nA Bitcoin ECDSA public key\nThe regtest network.\nBitcoin’s regtest network.\nConvenience alias for <code>Denomination::Satoshi</code>.\nThe number of bytes that an amount contributes to the size …\nsatoshi\nBitcoin script slice.\nAn owned, growable script.\nA hash of Bitcoin Script bytecode.\nHash of a transaction according to the segwit version 0 …\nBitcoin transaction input sequence number.\nSignedAmount\nBitcoin’s signet network.\n0x3: Sign the output whose index matches this input’s …\n0x3: Sign the output whose index matches this input’s …\n0x83: Sign one output and only this input (see <code>Single</code> for …\n0x83: Sign one output and only this input (see <code>Single</code> for …\nThe tag used for <code>TapNodeHash</code>\nTaproot-tagged hash with tag &quot;TapLeaf&quot;.\nThe tag used for <code>TapLeafHash</code>\nTagged hash used in taproot trees.\nTaproot-tagged hash with tag &quot;TapSighash&quot;.\nThe tag used for <code>TapSighash</code>\nHashtype of an input’s signature, encoded in the last …\nTaproot-tagged hash with tag &quot;TapTweak&quot;.\nThe tag used for <code>TapTweakHash</code>\nA 256 bit integer representing target.\nSome kind of testnet network.\nBitcoin’s testnet network.\nThe test networks, testnet and signet.\nBitcoin transaction.\nBitcoin transaction input.\nA hash of the Merkle tree branch or root for transactions.\nBitcoin transaction output.\nA bitcoin transaction hash/transaction ID.\nInitial version of witness program. Used for P2WPKH and …\nVersion of witness program used for Taproot P2TR outputs.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nA variable-length unsigned integer.\nThe factor that non-witness serialization data is …\nSegWit version of a public key hash.\nSegWit version of a Bitcoin Script bytecode hash.\nRepresents block weight - the weight of a transaction or …\nThe Witness is the data used to unlock bitcoin since the …\nA hash corresponding to the witness structure commitment …\nA hash corresponding to the Merkle tree root for witness …\nThe segregated witness program.\nVersion of the segregated witness program.\nA 256 bit integer representing work.\nA bitcoin witness transaction ID.\nExtended key identifier as defined in BIP-32.\nAn x-only public key, used for verification of Taproot …\nThe zero amount.\nThe zero amount.\n0 sat/kwu.\n0 wu.\nZero value sequence.\nWhen parsing nBits, Bitcoin Core converts a negative …\nGet the absolute value of this SignedAmount.\nTweaks an <code>XOnlyPublicKey</code> by adding the generator …\nBitcoin addresses.\nGets the address type of the address.\nBitcoin amounts.\nReturns the script data as a byte slice.\nReturns the script data as a mutable byte slice.\nObtains a raw mutable pointer suitable for use with FFI …\nReturns a mutable reference to unsized script.\nObtains a raw const pointer suitable for use with FFI …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to unsized script.\nReturns a reference to the address as if it was unchecked.\nMarks, without any additional checks, network of this …\nReturns a reference to the checked address.\nAssumes the given 32 byte array as hidden <code>TapNodeHash</code>.\nReturns the base size of this input.\nReturns the base transaction size.\nBIP152 Compact Blocks\nBIP 158 Compact Block Filters for Light Clients.\nBIP32 implementation.\nReturns the block height, as encoded in the coinbase …\nReturns the block hash.\nBitcoin block data.\nCreates a new script builder\nCreates a new script builder\nReturns an iterator over script bytes.\nReturn the network’s chain hash (genesis block hash).\nChecks if merkle root of header matches merkle root of the …\nChecks if witness commitment in coinbase matches the …\nGet the absolute value of this SignedAmount. Returns None …\nChecked addition.\nChecked addition. Returns None if overflow occurred.\nChecked addition.\nChecked integer division.\nChecked integer division. Be aware that integer division …\nChecked division.\nChecked division.\nChecked multiplication.\nChecked multiplication. Returns None if overflow occurred.\nChecked multiplication.\nChecked multiplication.\nChecked weight multiplication.\nChecked remainder.\nChecked remainder. Returns None if overflow occurred.\nChecked subtraction.\nChecked subtraction. Returns None if overflow occurred.\nChecked subtraction.\nClassifies an Opcode into a broad class.\nClear the witness.\nLike <code>cmp::Cmp</code> but faster and with no guarantees across …\nReturns the coinbase transaction, if one is present.\nCombines this <code>Psbt</code> with <code>other</code> PSBT as described by BIP 174.\nWhether this public key should be serialized as compressed\nWhether this private key should be serialized as compressed\nComputes the transaction merkle root.\nComputes a “normalized TXID” which does not include …\nComputes the <code>Txid</code>.\nComputes the witness commitment for the block’s …\nComputes the segwit version of the transaction id.\nBitcoin consensus.\nCounts the sigops for this Script using accurate counting.\nCounts the sigops for this Script using legacy counting.\nThe default value of sequence is 0xffffffff.\nDeserialize a value from raw binary data.\nDeserialize a value from raw binary data read from a …\nComputes the popular “difficulty” measure for mining.\nComputes the popular “difficulty” measure for mining …\nCreate an object that implements <code>fmt::Display</code> dynamically …\nCreate an object that implements <code>fmt::Display</code> dynamically …\nCreate an object that implements <code>fmt::Display</code> using …\nCreate an object that implements <code>fmt::Display</code> using …\nReturns the minimum value an output with this script …\nECDSA Bitcoin signatures.\nReturns <code>true</code> if the sequence number enables absolute …\nReturns true if this input enables the <code>absolute::LockTime</code> …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nContains error types and other error handling tools.\nExtract the matching txid’s represented by this partial …\nAn alias for <code>extract_tx_fee_rate_limit</code>.\nExtracts the <code>Transaction</code> from a <code>Psbt</code> by filling in the …\nPerform <code>extract_tx_fee_rate_limit</code> without the fee rate …\nExtracts the <code>Transaction</code> from a <code>Psbt</code> by filling in the …\nCalculates transaction fee.\nCalculates fee by multiplying this fee rate by weight, in …\nCalculates fee by multiplying this fee rate by weight, in …\nComputes the filter header from a filter hash and previous …\nReturns the first opcode of the script (if there is any).\nWrites the human-readable assembly representation of the …\nFormat the value of this Amount in the given denomination.\nFormat the value of this SignedAmount in the given …\nFormat the private key to WIF format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a relative lock-time using time intervals where …\nCreates <code>Work</code> from a big-endian byte array.\nCreates <code>Target</code> from a big-endian byte array.\nCreate a MerkleBlock from a block, that contains proofs …\nConvert from a value expressing bitcoins to an Amount.\nConvert from a value expressing bitcoins to an SignedAmount…\nTreat byte slice as <code>Script</code>\nConverts byte vector into script.\nTreat mutable byte slice as <code>Script</code>\nCreates a <code>Network</code> from the chain hash (genesis block hash).\nComputes the <code>Target</code> value from a compact representation.\nCreates a sequence from a u32 value.\nCreates a <code>EcdsaSighashType</code> from a raw <code>u32</code>.\nCreates a <code>CompactTarget</code> from a consensus encoded <code>u32</code>.\nConstructs a <code>TapSighashType</code> from a raw <code>u8</code>.\nConverts a <code>bitcoind -chain</code> argument name to its equivalent …\nConvert this Amount in floating-point notation with a given\nConvert this SignedAmount in floating-point notation with …\nCreate a MerkleBlock from the block’s header and txids, …\nCreates a relative lock-time using block height.\nCreates a <code>ScriptBuf</code> from a hex string.\nCreates a <code>Sequence</code> from an prefixed hex string.\nCreates <code>Work</code> from a prefixed hex string.\nCreates <code>Target</code> from a prefixed hex string.\nCreates a <code>CompactTarget</code> from an prefixed hex string.\nConvert from a value expressing integer values of bitcoins …\nCreates a new BIP341 <code>TapTweakHash</code> from key and tweak. …\nReturns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for <code>keypair</code>.\nConstructs <code>Weight</code> from kilo weight units returning <code>None</code> if …\nCreates <code>Work</code> from a little-endian byte array.\nCreates <code>Target</code> from a little-endian byte array.\nCreates a <code>Network</code> from the magic bytes.\nComputes branch hash given two hashes of the nodes …\nConstructs <code>Weight</code> from non-witness size.\nComputes the public key as supposed to be used with this …\nComputes the public key as supposed to be used with this …\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreates this wrapper type from the inner hash type.\nCreate an Amount with satoshi precision and the given …\nCreate an SignedAmount with satoshi precision and the …\nConstructs <code>FeeRate</code> from satoshis per 1000 weight units.\nConstructs <code>FeeRate</code> from satoshis per virtual bytes.\nConstructs <code>FeeRate</code> from satoshis per virtual bytes without …\nConstructs an <code>Address</code> from an output script (<code>scriptPubkey</code>).\nComputes the leaf hash from components.\nComputes the <code>TapNodeHash</code> from a script and a leaf version.\nCreates a relative lock-time from seconds, converting the …\nCreates a relative lock-time from seconds, converting the …\nCreates a schnorr public key directly from a slice.\nCreates a <code>Witness</code> object from a slice of bytes slices …\nDeserialize a public key from a slice\nDeserialize a public key from a slice\nDeserialize a private key from a slice\nCreates a <code>EcdsaSighashType</code> from a raw <code>u32</code>.\nConvert from a str to Denomination.\nParse a decimal string as a value in the given …\nParse a decimal string as a value in the given …\nParses amounts with denomination suffix like they are …\nParses amounts with denomination suffix like they are …\nCreates a <code>Sequence</code> from an unprefixed hex string.\nCreates <code>Work</code> from an unprefixed hex string.\nCreates <code>Target</code> from an unprefixed hex string.\nCreates a <code>CompactTarget</code> from an unprefixed hex string.\nCreates a PSBT from an unsigned transaction.\nConstructs <code>Weight</code> from virtual bytes, returning <code>None</code> on …\nConstructs <code>Weight</code> from virtual bytes without an overflow …\nConstructs <code>Weight</code> from virtual bytes panicking on overflow.\nParse WIF encoded private key.\nConstructs <code>Weight</code> from witness size.\nCreates an address from an arbitrary witness program.\nDirectly constructs <code>Weight</code> from weight units.\nDirectly constructs <code>Weight</code> from usize weight units.\nConstructs new compressed ECDSA private key using the …\nBitcoin hash types.\nThe block header\nThe block header\nThe actual ECDSA key\nThe actual ECDSA key\nList of transaction inputs.\nThe corresponding key-value map for each input in the …\nIterates over the script instructions and their indices.\nIterates over the script instructions and their indices …\nIterates over the script instructions.\nIterates over the script instructions while enforcing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>ScriptBuf</code> into a boxed <code>Script</code>.\nConverts the script into a byte vector.\nConverts a <code>Box&lt;Script&gt;</code> into a <code>ScriptBuf</code> without copying or …\nReturns true if this <code>Transaction</code>’s absolute timelock is …\nChecks if this is a coinbase transaction.\nReturns whether the script is the empty script.\nReturns <code>true</code> if the witness contains no element.\nReturns <code>true</code> if the transaction itself opted in to be …\nReturns <code>true</code> if the sequence number indicates that the …\nReturns <code>true</code> if the sequence number encodes a block based …\nReturns <code>true</code> if this transactions nLockTime is enabled (…\nReturns true if this is real mainnet bitcoin.\nReturns true if block hash is less than or equal to this …\nChecks whether a script pubkey is a bare multisig output.\nReturns <code>true</code> if this SignedAmount is negative and <code>false</code> if …\nChecks if an <code>OutPoint</code> is “null”.\nCheck if this is an OP_RETURN output.\nChecks whether a script pubkey is a P2PK output.\nChecks whether a script pubkey is a P2PKH output.\nChecks whether a script pubkey is a P2SH output.\nChecks whether a script pubkey is a P2TR output.\nReturns true if this witness program is for a P2TR output.\nChecks whether a script pubkey is a P2WPKH output.\nReturns true if this witness program is for a P2WPKH …\nChecks whether a script pubkey is a P2WSH output.\nReturns true if this witness program is for a P2WPSH …\nReturns <code>true</code> if this SignedAmount is positive and <code>false</code> if …\nChecks whether a script is trivially known to have no …\nChecks whether a script is push only.\nReturns true if the transaction opted-in to BIP125 …\nReturns true if the given pubkey is directly related to …\nReturns true if the supplied xonly public key can be used …\nReturns <code>true</code> if the sequence has a relative lock-time.\nChecks whether or not the address is following Bitcoin …\nReturns <code>true</code> if the sequence number encodes a time …\nReturns the compressed-ness of the underlying secp256k1 …\nParsed addresses do not always have <em>one</em> network. The …\nChecks whether a script pubkey is a Segregated Witness …\nReturns a struct implementing <code>Iterator</code>.\nReturns an iterator for the funding UTXOs of the psbt\nBitcoin keys.\nReturns the last element in the witness, if any.\nThe weight of the TxIn when it’s included in a legacy …\nReturns the length in bytes of the script.\nReturns the number of elements this witness holds.\nBlock height or timestamp. Transaction cannot be included …\nReturns log2 of this work.\nReturn the network magic bytes, which should be encoded …\nReturns true if the address creates a particular script …\nComputes the maximum valid <code>Target</code> threshold allowed for a …\nComputes the maximum valid <code>Target</code> threshold allowed for a …\nComputes the maximum valid <code>Target</code> threshold allowed for a …\nBitcoin merkle tree functions.\nComputes the minimum valid <code>Target</code> threshold allowed for a …\nComputes the minimum valid <code>Target</code> threshold allowed for a …\nReturns the minimum value an output with this script …\nCreates a <code>TxOut</code> with given script and the smallest …\nReturns the minimum value an output with this script …\nCreates a <code>TxOut</code> with given script and the smallest …\nBitcoin network.\nThe network kind on which this key should be used\nCreates a new empty script.\nCreates a new empty script.\nCreates a new witness program, copying the content from …\nCreates a new <code>OutPoint</code>.\nCreates a new empty <code>Witness</code>.\nConstructs compressed ECDSA public key from the provided …\nConstructs compressed ECDSA private key from the provided …\nGenerates OP_RETURN-type of scriptPubkey for the given …\nGenerates P2PK-type of scriptPubkey.\nGenerates P2PKH-type of scriptPubkey.\nGenerates P2SH-type of scriptPubkey with a given hash of …\nGenerates P2TR for script spending path using an internal …\nGenerates P2TR for key spending path for a known …\nGenerates P2WPKH-type of scriptPubkey.\nGenerates P2WSH-type of scriptPubkey with a given hash of …\nConstructs uncompressed (legacy) ECDSA public key from the …\nConstructs uncompressed (legacy) ECDSA private key from …\nGenerates P2WSH-type of scriptPubkey with a given …\nReturn the nth element in the witness, if any\nComputes a “normalized TXID” which does not include …\nCreates a “null” <code>OutPoint</code>.\nList of transaction outputs.\nThe corresponding key-value map for each output in the …\nBitcoin p2p network types.\nReturns the public key if this script is P2PK with a <strong>valid</strong> …\nCreates a pay to (compressed) public key hash address from …\nCreates a pay to script hash P2SH address from a script.\nCreates a pay to script hash P2SH address from a script …\nCreates a pay to script address that embeds a witness pay …\nCreates a pay to script address that embeds a witness pay …\nCreates a pay to taproot address from an untweaked key.\nCreates a pay to taproot address from an untweaked key.\nCreates a witness required to do a key path spend of a …\nCreates a pay to taproot address from a pre-tweaked output …\nCreates a pay to taproot address from a pre-tweaked output …\nCreates a witness pay to public key address from a public …\nCreates a <code>WitnessProgram</code> from <code>pk</code> for a P2WPKH output.\nCreates a witness required to spend a P2WPKH output.\nReturns the script code used for spending a P2WPKH output …\nCreates the script code used for spending a P2WPKH output.\nReturns the script code used to spend a P2WPKH input.\nReturns the script code used to spend a P2WPKH input.\nCreates a witness pay to script hash address.\nCreates a <code>WitnessProgram</code> from <code>script</code> for a P2WSH output.\nReturns the associated network parameters.\nUnit parsing utilities.\nBitcoin policy.\nSubtraction that doesn’t allow negative SignedAmounts. …\nProof-of-work related integer types.\nThe reference to the previous output that is being used as …\nReturns the witness program.\nGlobal proprietary key-value pairs.\nPartially Signed Bitcoin Transactions.\nGets the pubkey hash for this address if this is a P2PKH …\nReturns bitcoin 160-bit hash of the public key\nReturns bitcoin 160-bit hash of the public key\nReturns the <code>PublicKey</code> for this <code>XOnlyPublicKey</code>.\nCreates a public key from this private key\nPush a new element on the witness, requires an allocation.\nPushes, as a new element on the witness, an ECDSA …\nAdd a single instruction to the script.\nLike push_instruction, but avoids calling <code>reserve</code> to not …\nAdds a single opcode to the script.\nAdds instructions to push some arbitrary data onto the …\nRead the public key from a reader\nRead the public key from a reader\nChecks whether network of this address is as required.\nPre-allocates at least <code>additional_len</code> bytes if needed.\nPre-allocates exactly <code>additional_len</code> bytes if needed.\nScale by witness factor.\nAdds an <code>OP_VERIFY</code> to the script or replaces the last …\nGets the script hash for this address if this is a P2SH …\nReturns 160-bit hash of the script.\nGenerates a script pubkey spending to this address.\nThe script which must be satisfied for the output to be …\nReturns an iterator over lengths of <code>script_pubkey</code>s in the …\nThe script which pushes values on the stack which will …\nReturns the second-to-last element in the witness, if any.\nThe weight of the TxIn when it’s included in a segwit …\nThe sequence number, which suggests to miners which of two …\nSerializes the key as a byte-encoded x coordinate value …\nUser-facing serialization for <code>Script</code>.\nUser-facing serialization for <code>Script</code>.\nSerialize as raw binary data\nSerialize a value as bytes in hex.\nSerialize the PSBT into a writer.\nSignature hash implementation (used in transaction …\nReturns the sighash message to sign an ECDSA input along …\nAttempts to create <em>all</em> the required signatures for this …\nSignature\nReturns a number representing sign of this SignedAmount.\nReturns the total number of bytes that this output …\nReturns the number of bytes this witness contributes to a …\nReturns the number of bytes this varint contributes to a …\nReturns the spending utxo for this PSBT’s input at …\nTweaks an untweaked public key with corresponding public …\nBitcoin Taproot.\nGet Tapscript following BIP341 rules regarding accounting …\nComputes leaf hash of tapscript.\nGets the address data from this address.\nReturns the human-readable assembly representation of the …\nConverts <code>Work</code> to a big-endian byte array.\nConverts <code>Target</code> to a big-endian byte array.\nExpress this <code>Amount</code> as a floating-point value in Bitcoin.\nExpress this <code>SignedAmount</code> as a floating-point value in …\nReturns a copy of the script data.\nSerialize the public key to bytes\nSerializes the public key.\nSerialize the private key to bytes\nComputes the compact value from a <code>Target</code> representation.\nReturns the consensus encoded <code>u32</code> representation of this …\nReturns the inner 32bit integer value of Sequence.\nConverts a <code>Network</code> to its equivalent <code>bitcoind -chain</code> …\nConverts this witness version to a GF32 field element.\nExpress this Amount as a floating-point value in the given …\nExpress this SignedAmount as a floating-point value in the …\nFormats the script as lower-case hex.\nConverts to kilo weight units rounding down.\nConverts <code>Work</code> to a little-endian byte array.\nConverts <code>Target</code> to a little-endian byte array.\nReturns integer version number representation for a given …\nComputes the P2SH output corresponding to this redeem …\nComputes P2TR output with a given internal key and a …\nComputes the P2WSH output corresponding to this …\nCreates a URI string <em>bitcoin:address</em> optimized to be …\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nReturns the inner hash (sha256, sh256d etc.).\nCreates a <code>relative::LockTime</code> from this <code>Sequence</code> number.\nGets the number of satoshis in this <code>Amount</code>.\nGets the number of satoshis in this <code>SignedAmount</code>.\nReturns raw fee rate.\nConverts to sat/vB rounding up.\nConverts to sat/vB rounding down.\nConverts a <code>TapTweakHash</code> into a <code>Scalar</code> ready for use with …\nConvert to a signed amount.\nSerialize the public key into a <code>SortKey</code>.\nGet a string number of this Amount in the given …\nGet a string number of this SignedAmount in the given …\nGet a formatted string of this Amount in the given …\nGet a formatted string of this SignedAmount in the given …\nConverts this <code>Work</code> to <code>Target</code>.\nConverts <code>EcdsaSighashType</code> to a <code>u32</code> sighash flag.\nEncodes <code>Opcode</code> as a byte.\nConvert to an unsigned amount.\nConverts to vB rounding up.\nConverts to vB rounding down.\nConvenience method to create an array of byte-arrays from …\nGet WIF encoding of this private key.\nConverts this <code>Target</code> to <code>Work</code>.\nReturns raw weight units.\nCounts the total number of sigops.\nReturns the total block size.\nReturns the total number of bytes that this input …\nReturns the total transaction size.\nVerifies that a tweak produced by <code>XOnlyPublicKey::add_tweak</code>…\nReturns a reference to the input at <code>input_index</code> if it …\nReturns a reference to the output at <code>output_index</code> if it …\nList of transactions contained in the block\nComputes the <code>Txid</code>.\nThe referenced transaction’s txid.\nTransactions making up a partial merkle tree\nUnchecked addition.\nUnchecked addition.\nUnchecked subtraction.\nUnchecked subtraction.\nUnknown global key-value pairs.\nGet the absolute value of this SignedAmount returning …\nThe unsigned transaction, scriptSigs and witnesses for …\nThe value of the output, in satoshis.\nChecks that <code>sig</code> is a valid schnorr signature for <code>msg</code> using …\nChecks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …\nChecks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …\nReturns the witness program version.\nThe protocol version, is currently expected to be 1 or 2 …\nThe version number of this PSBT. If omitted, the version …\nThe index of the referenced output in its transaction’s …\nReturns the “virtual size” (vsize) of this transaction.\nReturns the weight of the block.\nThe weight of this output.\nReturns the weight of this transaction, as defined by …\nCreates a new empty script with pre-allocated capacity.\nWitness data: an array of byte-arrays. Note that this …\nGets the witness program for this address if this is a …\nComputes the merkle root of transactions hashed for …\nReturns witness version of the script, if any, assuming …\nReturns bitcoin 160-bit hash of the public key for witness …\nReturns bitcoin 160-bit hash of the public key for witness …\nWrite the public key into a writer\nWrite the public key into a writer\nReturns 256-bit hash of the script for P2WSH outputs.\nComputes the segwit version of the transaction id.\nA global map from extended public keys to the used key …\nA Bitcoin address.\nThe data encoded by an <code>Address</code>.\nThe different types of addresses.\nBase58 error.\nBech32 segwit decoding error.\nAddress size more than 520 bytes is not allowed.\nError while generating address from script.\nIndicates whether this <code>NetworkValidation</code> is <code>NetworkChecked</code> …\nInvalid base58 payload data length for legacy address.\nDecoded base58 data was an invalid length.\nInvalid legacy address prefix in base58 data payload.\nInvalid legacy address prefix in decoded base58 data.\nKnown bech32 human-readable parts.\nLegacy address is too long.\nLegacy base58 address was too long, max 50 characters.\nThe main Bitcoin network.\nMarker that address’s network has been successfully …\nMarker that address’s network has not yet been …\nMarker of status of address’s network validation. See …\nAddress’s network differs from required one.\nAddress’s network differs from required one.\nPay to pubkey hash.\nData encoded by a P2PKH address.\nPay to script hash.\nData encoded by a P2SH address.\nError while generating address from a p2sh script.\nPay to taproot.\nPay to witness pubkey hash.\nPay to witness script hash.\nAddress parsing error.\nThe regtest network.\nData encoded by a Segwit address.\nThe test networks, testnet and signet.\nAddress type is either invalid or not supported in …\nTried to parse an unknown HRP.\nUnknown HRP error.\nScript is not a p2pkh, p2sh or witness program.\nA witness program error.\nA witness program error.\nA witness version construction error.\nA witness version conversion/parsing error.\nError code for the address module.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invalid payload length.\nReturns the invalid prefix.\nReturns the invalid legacy address length.\nThe pubkey hash used to encumber outputs to this address.\nThe script hash used to encumber outputs to this address.\nThe witness program used to encumber outputs to this …\nBase58 error.\nBech32 segwit decoding error.\nAddress size more than 520 bytes is not allowed.\nError while generating address from script.\nInvalid base58 payload data length for legacy address.\nDecoded base58 data was an invalid length.\nInvalid legacy address prefix in base58 data payload.\nInvalid legacy address prefix in decoded base58 data.\nLegacy address is too long.\nLegacy base58 address was too long, max 50 characters.\nAddress’s network differs from required one.\nAddress’s network differs from required one.\nError while generating address from a p2sh script.\nAddress parsing error.\nAddress type is either invalid or not supported in …\nTried to parse an unknown HRP.\nUnknown HRP error.\nScript is not a p2pkh, p2sh or witness program.\nA witness program error.\nA witness program error.\nA witness version construction error.\nA witness version conversion/parsing error.\nAmount\nbits\nBTC\ncBTC\nCalculate the sum over the iterator using checked …\nA set of denominations in which amounts can be expressed.\nA helper/builder that displays amount with specified …\nInput string was too large.\nInvalid character in input.\nuBTC\nmBTC\nmsat\nA digit was expected but not found.\nnBTC\nThe amount is too big or too small.\nAn error during amount parsing.\npBTC\nsatoshi\nSignedAmount\nAmount has higher precision than supported by the type.\nCalculate the sum over the iterator using checked …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module adds serde serialization and deserialization …\nMakes subsequent calls to <code>Display::fmt</code> display …\nThis trait is used only to avoid code duplication and …\nThis trait is only for internal Amount type …\nSerialize and deserialize <code>Amount</code> as JSON numbers …\nSerialize and deserialize <code>Amount</code> as real numbers …\nSerialize and deserialize <code>Option&lt;Amount&gt;</code> as JSON numbers …\nSerialize and deserialize <code>Option&lt;Amount&gt;</code> as real numbers …\nInvalid character while decoding.\nAn error occurred during base58 decoding (with checksum).\nChecksum was not correct.\nFound a invalid ASCII byte while decoding base58 string.\nA UTF-8–encoded, growable string.\nChecked data was too short.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a byte slice of this <code>String</code>’s contents.\nReturns an unsafe mutable pointer to the vector’s …\nExtracts a mutable slice of the entire vector.\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nReturns a raw pointer to the vector’s buffer, or a …\nExtracts a slice containing the entire vector.\nExtracts a string slice containing the entire <code>String</code>.\nReturns the total number of elements the vector can hold …\nReturns this <code>String</code>’s capacity, in bytes.\nClears the vector, removing all values.\nTruncates this <code>String</code>, removing all contents.\nOverwrites the contents of <code>self</code> with a clone of the …\nClones the contents of <code>source</code> into <code>self</code>.\nDecodes a base58-encoded string into a byte vector.\nDecodes a base58check-encoded string into a byte vector …\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>Vec&lt;T&gt;</code>.\nCreates an empty <code>String</code>.\nRemoves the specified range from the vector in bulk, …\nRemoves the specified range from the string in bulk, …\nEncodes <code>data</code> as a base58 string (see also …\nEncodes <code>data</code> as a base58 string including the checksum.\nEncodes a slice as base58, including the checksum, into a …\nError code for the <code>base58</code> crate.\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies elements from <code>src</code> range to the end of the vector.\nCopies elements from <code>src</code> range to the end of the string.\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nAllocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nConvert a clone-on-write slice into a vector.\nReturns the argument unchanged.\nConvert a boxed slice into a vector by transferring …\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nAllocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a <code>&amp;String</code> into a <code>String</code>.\nConverts a <code>&amp;str</code> into a <code>String</code>.\nReturns the argument unchanged.\nAllocates an owned <code>String</code> from a single character.\nConverts a clone-on-write string to an owned instance of …\nConverts a <code>&amp;mut str</code> into a <code>String</code>.\nConverts the given boxed <code>str</code> slice to a <code>String</code>. It is …\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a new <code>String</code> from a pointer, a length and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nDecode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …\nDecode a UTF-16BE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16BE–encoded slice <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded slice <code>v</code> into a <code>String</code>, …\nConverts a vector of bytes to a <code>String</code>.\nConverts a slice of bytes to a string, including invalid …\nConverts a vector of bytes to a <code>String</code> without checking …\nInserts an element at position <code>index</code> within the vector, …\nInserts a character into this <code>String</code> at a byte position.\nInserts a string slice into this <code>String</code> at a byte position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nConverts this <code>String</code> into a Box&lt;str&gt;.\nConverts a <code>String</code> into a byte vector.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nCreates a consuming iterator, that is, one that moves each …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>String</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nReturns the ASCII byte that is not a valid base58 …\nReturns <code>true</code> if the vector contains no elements.\nReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nConsumes and leaks the <code>String</code>, returning a mutable …\nReturns the number of elements in the vector, also …\nReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or …\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nCreates a new empty <code>String</code>.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nRemoves the last element from a vector and returns it, or …\nRemoves the last character from the string buffer and …\nRemoves and returns the last element in a vector if the …\nAppends an element to the back of a collection.\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nAppends an element if there is sufficient spare capacity, …\nRemoves and returns the element at position <code>index</code> within …\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemove all matches of pattern <code>pat</code> in the <code>String</code>.\nRemoves the specified range in the string, and replaces it …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> bytes more than …\nReserves the minimum capacity for at least <code>additional</code> more …\nReserves the minimum capacity for at least <code>additional</code> …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the characters specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of this <code>String</code> with a lower bound.\nShrinks the capacity of the vector as much as possible.\nShrinks the capacity of this <code>String</code> to match its length.\nReturns the remaining spare capacity of the vector as a …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given index.\nSplits the string into two at the given byte index.\nRemoves an element from the vector and returns it.\nShortens the vector, keeping the first <code>len</code> elements and …\nShortens this <code>String</code> to the specified length.\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> bytes …\nTries to reserve the minimum capacity for at least …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nCreates a new empty <code>String</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nCreates a new empty <code>String</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nInvalid character while decoding.\nAn error occurred during base58 decoding (with checksum).\nChecksum was not correct.\nChecksum was not correct.\nFound a invalid ASCII byte while decoding base58 string.\nChecked data was too short.\nThe decode base58 data was too short (require at least 4 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the incorrect checksum along with the expected …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invalid base58 string length (require at least …\nThe config type used by this engine\nErrors that can occur while decoding.\nA DecodeError occurred\nThe decode estimate used by this engine\nErrors that can occur while decoding into a slice.\nErrors that can occur while encoding into a slice.\nAn <code>Engine</code> provides low-level encoding and decoding …\nAn invalid byte was found in the input. The offset and …\nThe last non-padding input symbol’s encoded 6 bits have …\nThe length of the input is invalid. A typical cause of …\nThe nature of the padding was not as configured: absent or …\nThe provided slice is too small.\nThe provided slice <em>may</em> be too small.\nProvides Alphabet and constants for alphabets commonly …\nReturns the config for this engine.\nDecode base64 using the <code>STANDARD</code> engine.\nDecode the input into a new <code>Vec</code>.\nDecode from string reference as octets using the specified …\nDecode the input into the provided output slice.\nDecode from string reference as octets.\nDecode the input into the provided output slice.\nDecode the input into the provided output slice.\nDecode the <code>input</code> into the supplied <code>buffer</code>.\nReturns a conservative estimate of the decoded size of …\nEnables base64’d output anywhere you might use a <code>Display</code> …\nEncode arbitrary octets as base64 using the <code>STANDARD</code> engine…\nEncode arbitrary octets as base64 using the provided <code>Engine</code>…\nEncode arbitrary octets as base64 using the provided <code>Engine</code>…\nEncode arbitrary octets as base64 into a supplied slice.\nEncode arbitrary octets as base64 into a supplied <code>String</code>.\nEncode arbitrary octets as base64 into a supplied slice. …\nEncode arbitrary octets as base64 into a supplied <code>String</code>. …\nCalculate the base64 encoded length for a given input …\nProvides the Engine abstraction and out of the box …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPreconfigured engines for common use cases.\nImplementations of <code>io::Read</code> to transparently decode base64.\nImplementations of <code>io::Write</code> to transparently handle …\nAn alphabet defines the 64 ASCII characters (symbols) used …\nThe bcrypt alphabet.\nThe alphabet used in BinHex 4.0 files.\nThe <code>crypt(3)</code> alphabet (with <code>.</code> and <code>/</code> as the <em>first</em> two …\nAll bytes must be unique\nThe alphabet used in IMAP-modified UTF-7 (with <code>+</code> and <code>,</code>).\nAlphabets must be 64 ASCII bytes\nPossible errors when constructing an Alphabet from a <code>str</code>.\n<code>=</code> cannot be used\nThe standard alphabet (with <code>+</code> and <code>/</code>) specified in RFC 4648.\nThe URL-safe alphabet (with <code>-</code> and <code>_</code>) specified in RFC 4648.\nAll bytes must be printable (in the range <code>[32, 126]</code>).\nCreate a <code>&amp;str</code> from the symbols in the <code>Alphabet</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an <code>Alphabet</code> from a string of 64 unique printable …\nA convenience wrapper for base64’ing bytes into a format …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a <code>Base64Display</code> with the provided engine.\nThe minimal level of configuration that engines must …\nThe config type used by this engine\nThe decode estimate used by an engine implementation. …\nThe decode estimate used by this engine\nMetadata about the result of a decode operation\nControls how pad bytes are handled when decoding.\nAn <code>Engine</code> provides low-level encoding and decoding …\nA general-purpose base64 engine.\nContains configuration parameters for base64 encoding and …\nCanonical padding is allowed, but any fewer padding bytes …\nPadding must be canonical (0, 1, or 2 <code>=</code> as needed to …\nPadding must be absent – for when you want predictable …\nReturns the config for this engine.\nDecode the input into a new <code>Vec</code>.\nDecode the input into the provided output slice.\nDecode the input into the provided output slice.\nDecode the <code>input</code> into the supplied <code>buffer</code>.\nReturns a conservative (err on the side of too big) …\nDelegates to GeneralPurposeConfig::new.\nEncode arbitrary octets as base64 using the provided <code>Engine</code>…\nReturns <code>true</code> if padding should be added after the encoded …\nEncode arbitrary octets as base64 into a supplied slice. …\nEncode arbitrary octets as base64 into a supplied <code>String</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides the GeneralPurpose engine and associated config …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>GeneralPurpose</code> engine from an Alphabet.\nCreate a new config with <code>padding</code> = <code>true</code>, …\nCreate a new config based on <code>self</code> with an updated …\nCreate a new config based on <code>self</code> with an updated …\nCreate a new config based on <code>self</code> with an updated <code>padding</code> …\nA general-purpose base64 engine.\nContains configuration parameters for base64 encoding and …\nDon’t add padding when encoding, and require no padding …\nInclude padding bytes when encoding, and require that they …\nA GeneralPurpose engine using the alphabet::STANDARD …\nA GeneralPurpose engine using the alphabet::STANDARD …\nA GeneralPurpose engine using the alphabet::URL_SAFE …\nA GeneralPurpose engine using the alphabet::URL_SAFE …\nA GeneralPurpose engine using the alphabet::STANDARD …\nA GeneralPurpose engine using the alphabet::STANDARD …\nA GeneralPurpose engine using the alphabet::URL_SAFE …\nA GeneralPurpose engine using the alphabet::URL_SAFE …\nThe config type used by this engine\nThe decode estimate used by this engine\nAn <code>Engine</code> provides low-level encoding and decoding …\nReturns the config for this engine.\nDecode the input into a new <code>Vec</code>.\nDecode the input into the provided output slice.\nDecode the input into the provided output slice.\nDecode the <code>input</code> into the supplied <code>buffer</code>.\nEncode arbitrary octets as base64 using the provided <code>Engine</code>…\nEncode arbitrary octets as base64 into a supplied slice. …\nEncode arbitrary octets as base64 into a supplied <code>String</code>. …\nA <code>Read</code> implementation that decodes base64 data read from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnwraps this <code>DecoderReader</code>, returning the base reader …\nCreate a new decoder that will read from the provided …\nDecode input from the wrapped reader.\nA <code>Write</code> implementation that base64-encodes data using the …\nA <code>Write</code> implementation that base64 encodes data before …\nAn abstraction around consuming <code>str</code>s produced by base64 …\nConsume the base64 encoded data in <code>buf</code>\nEncode all remaining buffered data and write it, including …\nBecause this is usually treated as OK to call multiple …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a EncoderStringWriter that will append to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps this <code>EncoderWriter</code>, returning the base writer it …\nEncode all remaining buffered data, including any trailing …\nCreate a new encoder that will write to the provided …\nCreate a EncoderStringWriter that will encode into a new …\nEncode input and then write to the delegate writer.\nA BlockTransactions structure is used to provide some of …\nA BlockTransactionsRequest structure is used to list …\nA BIP-152 error\nA HeaderAndShortIds structure is used to relay a block …\nThe prefill slice provided was invalid.\nA PrefilledTransaction structure is used in …\nShort transaction IDs are used to represent a transaction …\nA transaction index is requested that is out of range from …\nAn unknown version number was used.\nReturns a reference the underlying bytes.\nConverts the object to a mutable raw pointer.\nConverts the object to a raw pointer.\nThe blockhash of the block which the transactions being …\nThe blockhash of the block which the transactions being …\nCalculate the SipHash24 keys used to calculate short IDs.\nPanics\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new HeaderAndShortIds from a full block.\nCreates <code>Self</code> from a hex string.\nConstruct a BlockTransactions from a …\nThe header of the block being provided.\nThe index of the transaction in the block.\nThe indexes of the transactions being requested in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the object, as an array, is empty. Always …\nReturns the length of the object as an array.\nA nonce for use in short transaction ID calculations.\nUsed to provide the coinbase transaction and a select few …\nThe short transaction IDs calculated from the transactions …\nReturns the underlying bytes.\nThe transactions provided.\nThe actual transaction.\nCalculate the short ID with the given (w)txid and using …\nBitwise stream reader.\nBitwise stream writer.\nA block filter, as described by BIP 158.\nReads and interprets a block filter.\nCompiles and writes a block filter.\nErrors for blockfilter.\nFilter hash, as defined in BIP-157\nFilter header, as defined in BIP-157\nGolomb-Rice encoded filter reader.\nGolomb-Rice encoded filter writer.\nIO error reading or writing binary serialization of the …\nMissing UTXO, cannot calculate script filter.\nAdds an arbitrary element to filter.\nAdds data to the filter.\nAdds consumed output scripts of a block to filter.\nAdds output scripts of the block to filter (excluding …\nGolomb encoded filter\nComputes this filter’s ID in a chain of filters (see BIP …\nWrites the block filter.\nWrites the filter to the wrapped writer.\nflush bits not yet written.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if all queries match against this …\nReturns true if all queries match against this …\nReturns true if all queries match against this <code>BlockFilter</code>.\nReturns true if any query matches against this …\nReturns true if any query matches against this …\nReturns true if any query matches against this <code>BlockFilter</code>.\nCreates a new <code>BlockFilterWriter</code> from <code>block</code>.\nCreates a new <code>BlockFilterReader</code> from <code>block_hash</code>.\nCreates a new <code>GcsFilterReader</code> with specific seed to …\nCreates a new <code>GcsFilterWriter</code> wrapping a generic writer, …\nCreates a new <code>BitStreamReader</code> that reads bitwise from a …\nCreates a new <code>BitStreamWriter</code> that writes bitwise to a …\nCreates a new filter from pre-computed data.\nComputes a SCRIPT_FILTER that contains spent and output …\nReads nbit bits, returning the bits in a <code>u64</code> starting with …\nWrites nbits bits from data.\nBase58 encoding error\nA pk-&gt;pk derivation was attempted on a hardened key\nA chain code\nA child number for a derived key\nA BIP-32 derivation path.\nAn iterator over children of a DerivationPath.\nA BIP32 error\nThe old name for xpriv, extended public key.\nThe old name for xpub, extended public key.\nThe old name for xpriv, extended public key (with a …\nThe old name for xpub, extended public key (with a …\nA fingerprint\nHardened key\nHexadecimal decoding error\nTrait that allows possibly failable conversion from a type …\nBase58 decoded data was an invalid length.\nDecoded base58 data was an invalid length.\nA child number was provided that was out of range\nInvalid childnumber format.\nInvalid derivation path format.\n<code>PublicKey</code> hex should be 66 or 130 digits long.\nFull information on the used extended public key: …\nNon-hardened key\nA secp256k1 error occurred\nUnknown version magic bytes\nEncoded extended key data has wrong length\nExtended key identifier as defined in BIP-32.\nExtended private key\nExtended public key\nReturns a reference the underlying bytes.\nReturns a reference the underlying bytes.\nConverts the object to a mutable raw pointer.\nConverts the object to a mutable raw pointer.\nConverts the object to a raw pointer.\nConverts the object to a raw pointer.\nChain code\nChain code\nChain code\nChain code\nChain code\nChain code\nCreate a new DerivationPath that is a child of this one.\nChild number of the key used to derive from parent (0 for …\nChild number of the key used to derive from parent (0 for …\nChild number of the key used to derive from parent (0 for …\nChild number of the key used to derive from parent (0 for …\nChild number of the key used to derive from parent (0 for …\nChild number of the key used to derive from parent (0 for …\nGet an Iterator over the children of this DerivationPath …\nPublic-&gt;Public child key derivation\nCompute the scalar tweak added to this key to get a child …\nDecoding extended private key from binary data according …\nDecoding extended public key from binary data according to …\nHow many derivations this key is from the master (which is …\nHow many derivations this key is from the master (which is …\nHow many derivations this key is from the master (which is …\nHow many derivations this key is from the master (which is …\nHow many derivations this key is from the master (which is …\nHow many derivations this key is from the master (which is …\nAttempts to derive an extended private key from a path.\nAttempts to derive an extended public key from a path.\nExtended private key binary encoding according to BIP 32\nExtended public key binary encoding according to BIP 32\nConcatenate <code>self</code> with <code>path</code> and return the resulting new …\nReturns the first four bytes of the identifier\nReturns the first four bytes of the identifier\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Hardened</code> from an index, returns an error if the …\nCreates <code>Self</code> from a hex string.\nCreates <code>Self</code> from a hex string.\nCreate a <code>Normal</code> from an index, returns an error if the …\nDerives a public key from a private key\nGet an Iterator over the hardened children of this …\nReturns the HASH160 of the public key belonging to the …\nReturns the HASH160 of the chaincode\nReturns the child number that is a single increment from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a DerivationPath that is a child of this one.\nConverts a given type into a <code>DerivationPath</code> with possible …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns the invalid payload length.\nReturns whether the object, as an array, is empty. Always …\nReturns whether the object, as an array, is empty. Always …\nReturns <code>true</code> if the derivation path is empty\nReturns <code>true</code> if the child number is a <code>Hardened</code> value.\nReturns whether derivation path represents master key …\nReturns <code>true</code> if the child number is a <code>Normal</code> value.\nReturns the length of the object as an array.\nReturns the length of the object as an array.\nReturns length of the derivation path\nReturns derivation path for a master key (i.e. empty …\nThe network kind this key is to be used on\nThe network kind this key is to be used on\nThe network this key is to be used on\nThe network this key is to be used on\nThe network this key is to be used on\nThe network kind this key is to be used on\nConstruct a new master key from a seed value\nGet an Iterator over the unhardened children of this …\nFingerprint of the parent key\nFingerprint of the parent key\nFingerprint of the parent key (0 for master)\nFingerprint of the parent key (0 for master)\nFingerprint of the parent key (0 for master)\nFingerprint of the parent key\nPrivate key\nPrivate key\nPrivate key\nPublic key\nPublic key\nPublic key\nStart a new DerivationPathIterator at the given child.\nReturns the underlying bytes.\nReturns the underlying bytes.\nConstructs BIP340 keypair for Schnorr signatures and …\nConstructs ECDSA compressed private key matching internal …\nConstructs ECDSA compressed public key matching internal …\nReturns the derivation path as a vector of u32 integers. …\nConstructs BIP340 x-only public key for BIP-340 signatures …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nKey index, within [0, 2^31 - 1]\nKey index, within [0, 2^31 - 1]\nRepresents fee rate.\nRepresents block weight - the weight of a transaction or …\nBitcoin blocks.\nBlockdata constants.\nImplements <code>FeeRate</code> and assoctiated features.\nProvides absolute and relative locktimes.\nBitcoin script opcodes.\nBitcoin scripts.\nBitcoin transactions.\nImplements <code>Weight</code> and associated features.\nWitness\nThe header hash is not below the target.\nThe <code>target</code> field of a block header did not match the …\nAn error when looking up a BIP34 block height.\nBitcoin block.\nA bitcoin block hash.\nBitcoin block header.\nBIP-9 compatible version number that does not signal for …\nThe BIP34 push was negative.\nNo push was present where the BIP34 push was expected.\nThe original Bitcoin Block v1.\nThe number of bytes that the block header contributes to …\nBIP-34 Block v2.\nA hash of the Merkle tree branch or root for transactions.\nThe BIP34 push was larger than 8 bytes.\nThe block does not support BIP34 yet.\nA block validation error.\nBitcoin block version number.\nA hash corresponding to the witness structure commitment …\nA hash corresponding to the Merkle tree root for witness …\nThe target value below which the blockhash must lie.\nReturns the block hash.\nComputes the popular “difficulty” measure for mining.\nComputes the popular “difficulty” measure for mining …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Version</code> from a signed 32 bit integer value.\nThe block header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the version number is signalling a soft …\nThe root hash of the merkle tree of transactions in the …\nThe nonce, selected to obtain a low enough blockhash.\nReference to the previous block in the chain.\nComputes the target (range [0, T] inclusive) that a …\nThe timestamp of the block, as claimed by the miner.\nReturns the inner <code>i32</code> value.\nList of transactions contained in the block\nChecks that the proof-of-work for the block is valid, …\nBlock version, now repurposed for soft fork signalling.\nReturns the total work of the block.\n<code>ChainHash</code> for mainnet bitcoin.\nNumber of blocks needed for an output from a coinbase …\nThe uniquely identifying hash of the target blockchain.\nHow many blocks between diffchanges.\nHow much time on average should occur between diffchanges.\nThe maximum allowed number of signature check operations …\nMaximum allowed value for an integer in Script.\nThe maximum allowed script size.\nMainnet (bitcoin) pubkey address prefix.\nTest (tesnet, signet, regtest) pubkey address prefix.\n<code>ChainHash</code> for regtest bitcoin.\nMainnet (bitcoin) script address prefix.\nTest (tesnet, signet, regtest) script address prefix.\n<code>ChainHash</code> for signet bitcoin.\nHow may blocks between halvings.\nHow many seconds between blocks we expect on average.\n<code>ChainHash</code> for testnet bitcoin.\nThe factor that non-witness serialization data is …\nReturns a reference the underlying bytes.\nConverts the object to a mutable raw pointer.\nConverts the object to a raw pointer.\nReturns the argument unchanged.\nConverts genesis block hash into <code>ChainHash</code>.\nCreates <code>Self</code> from a hex string.\nConstructs and returns the genesis block.\nCalls <code>U::from(self)</code>.\nReturns whether the object, as an array, is empty. Always …\nReturns the length of the object as an array.\nReturns the underlying bytes.\nReturns the hash of the <code>network</code> genesis block for use as a …\nReturns the hash of the <code>network</code> genesis block for use as a …\nRepresents fee rate.\nProvides type <code>LockTime</code> that implements the logic around …\nProvides type <code>LockTime</code> that implements the logic around …\nA block height lock time value.\nAn error that occurs when converting a <code>u32</code> to a lock time …\nAn absolute block height, guaranteed to always contain a …\nThe Threshold for deciding whether a lock time value is a …\nAn absolute lock time value, representing either a block …\nThe maximum absolute block height.\nThe maximum absolute block time (Sun Feb 07 2106 06:28:15 …\nThe minimum absolute block height (0), the genesis block.\nThe minimum absolute block time (Tue Nov 05 1985 00:53:20 …\nError returned when parsing block height fails.\nError returned when parsing block time fails.\nThe number of bytes that the locktime contributes to the …\nA UNIX timestamp lock time value.\nA UNIX timestamp, seconds since epoch, guaranteed to …\nAbsolute block height 0, the genesis block.\nIf <code>crate::Transaction::lock_time</code> is set to zero it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new block height.\nConstructs a new block time.\nConstructs a <code>LockTime</code> from an nLockTime value or the …\nConstructs a <code>LockTime</code> from <code>n</code>, expecting <code>n</code> to be a valid …\nCreates a <code>Height</code> from a hex string.\nCreates a <code>Time</code> from a hex string.\nCreates a <code>LockTime</code> from an prefixed hex string.\nConstructs a <code>LockTime</code> from <code>n</code>, expecting <code>n</code> to be a valid …\nCreates a <code>LockTime</code> from an unprefixed hex string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this lock time value is a block height.\nReturns true if this lock time value is a block time (UNIX …\nReturns true if satisfaction of <code>other</code> lock time implies …\nReturns true if both lock times use the same unit i.e., …\nReturns true if this timelock constraint is satisfied by …\nConverts this <code>Height</code> to its inner <code>u32</code> value.\nConverts this <code>Time</code> to its inner <code>u32</code> value.\nReturns the inner <code>u32</code> value. This is the value used when …\nA block height lock time value.\nError returned when a sequence number is parsed as a lock …\nA relative lock time lock-by-blockheight value.\nTried to satisfy a lock-by-blocktime lock using a height …\nTried to satisfy a lock-by-blockheight lock using a time …\nA relative lock time value, representing either a block …\nThe maximum relative block height.\nThe maximum relative block time (33,554,432 seconds or …\nThe minimum relative block height (0), can be included in …\nThe minimum relative block time (0), can be included in …\nThe number of bytes that the locktime contributes to the …\nA relative lock time lock-by-blocktime value.\nA 512 second time interval value.\nInput time in seconds was too large to be encoded to a 16 …\nRelative block height 0, can be included in any block.\nRelative block time 0, can be included in any block.\nA relative locktime of 0 is always valid, and is assumed …\nAccessor for the <code>u32</code> whose “disable” flag was set, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Time</code> using time intervals where each interval is …\nConstructs a <code>LockTime</code> from <code>n</code>, expecting <code>n</code> to be a count of …\nConstructs a <code>LockTime</code> from an nSequence value or the …\nCreate a <code>Height</code> using a count of blocks.\nConstructs a <code>LockTime</code> from <code>n</code>, expecting <code>n</code> to be a 16-bit …\nCreate a <code>Time</code> from seconds, converting the seconds into …\nCreate a <code>LockTime</code> from seconds, converting the seconds …\nCreate a <code>Time</code> from seconds, converting the seconds into …\nCreate a <code>LockTime</code> from seconds, converting the seconds …\nConstructs a <code>LockTime</code> from the sequence number of a …\nAttempted to satisfy a lock-by-blocktime lock with this …\nThe inner height value of the lock-by-blockheight lock.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this lock time value is in units of block …\nReturns true if this lock time value is in units of time.\nReturns true if satisfaction of <code>other</code> lock time implies …\nReturns true if satisfaction of the sequence number …\nReturns true if both lock times use the same unit i.e., …\nReturns true if this [<code>relative::LockTime</code>] is satisfied by …\nReturns true if this [<code>relative::LockTime</code>] is satisfied by …\nReturns true if this [<code>relative::LockTime</code>] is satisfied by …\nCreates a new <code>TimeOverflowError</code> using <code>seconds</code>.\nThe inner time value of the lock-by-blocktime lock.\nAttempted to satisfy a lock-by-blockheight lock with this …\nReturns the <code>u32</code> value used to encode this locktime in an …\nReturns the <code>u32</code> value used to encode this locktime in an …\nReturns the <code>u32</code> value used to encode this locktime in an …\nEncodes the locktime as a sequence number.\nReturns the inner <code>u16</code> value.\nReturns the inner <code>u16</code> value.\nBroad categories of opcodes with similar behavior.\nClassification context for the opcode.\nFails the script even if not executed.\nOpcode used in legacy context.\nDoes nothing.\nPush an empty array onto the stack.\nEmpty stack is also FALSE.\nPreviously called OP_NOP2.\nPreviously called OP_NOP3.\nNumber 1 is also TRUE.\nA script Opcode.\nAny opcode not covered above.\nPushes the given number of bytes onto the stack.\nPushes the given number onto the stack.\nFails the script if executed.\nSucceeds the script even if not executed.\nOpcode used in tapscript context.\nEnables wildcard imports to bring into scope all opcodes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap 0 to 0 and everything else to 1, in place.\nIncrement the top stack element in place.\nDecrement the top stack element in place.\nFail the script unconditionally, does not even need to be …\nDrops the top two stack items.\nDuplicates the top two stack items as AB -&gt; ABAB.\nFail the script unconditionally, does not even need to be …\nCopies the two stack items of items two spaces back to the …\nMoves the two stack items four spaces back to the front, …\nSwaps the top two pairs, as ABCD -&gt; CDAB.\nDuplicates the two three stack items as ABC -&gt; ABCABC.\nAbsolute value the top stack item in place.\nPop two stack items and push their sum.\nFail the script unconditionally, does not even need to be …\nPop the top two stack items and push 1 if both are …\nPop the top two stack items and push 1 if either is …\nFail the script unconditionally, does not even need to be …\nPop N, N pubkeys, M, M signatures, a dummy (due to bug in …\nLike the above but return success/failure.\nhttps://en.bitcoin.it/wiki/OP_CHECKSIG pushing 1/0 for …\nOP_CHECKSIGADD post tapscript.\nhttps://en.bitcoin.it/wiki/OP_CHECKSIG returning …\n…\nIgnore this and everything preceding when deciding what to …\n…\nPush the current number of stack items onto the stack.\nFail the script unconditionally, does not even need to be …\nDrops the top stack item.\nDuplicates the top stack item.\nExecute statements if those after the previous OP_IF were …\nPop and execute the next statements if a zero element was …\nPushes 1 if the inputs are exactly equal, 0 otherwise.\nReturns success if the inputs are exactly equal, failure …\nPop one element from the alt stack onto the main stack.\nPop the top two items; push 1 if the second is greater …\nPop the top two items; push 1 if the second is &gt;= the top, …\nPop the top stack item and push its RIPEMD(SHA256) hash.\nPop the top stack item and push its SHA256(SHA256) hash.\nPop and execute the next statements if a nonzero element …\nDuplicate the top stack element unless it is zero.\nSynonym for OP_RETURN.\nFail the script unconditionally, does not even need to be …\nFail the script unconditionally, does not even need to be …\nPop the top two items; push 1 if the second is less than …\nPop the top two items; push 1 if the second is &lt;= the top, …\nFail the script unconditionally, does not even need to be …\nPop the top two items; push the larger.\nPop the top two items; push the smaller.\nFail the script unconditionally, does not even need to be …\nFail the script unconditionally, does not even need to be …\nMultiply the top stack item by -1 in place.\nDrops the second-to-top stack item.\nDoes nothing.\nDoes nothing.\nDoes nothing.\nDoes nothing.\nDoes nothing.\nDoes nothing.\nDoes nothing.\nDoes nothing.\nDoes nothing.\nMap 0 to 1 and everything else to 0, in place.\nPop and execute the next statements if a zero element was …\nPop the top two stack items and push 1 if both are …\nPop the top two stack items and return success if both are …\nPop the top two stack items and push 0 if both are …\nFail the script unconditionally, does not even need to be …\nCopies the second-to-top stack item, as xA -&gt; AxA.\nPop the top stack element as N. Copy the Nth stack element …\nPush an empty array onto the stack.\nPush the next byte as an array onto the stack.\nPush the next 10 bytes as an array onto the stack.\nPush the next 11 bytes as an array onto the stack.\nPush the next 12 bytes as an array onto the stack.\nPush the next 13 bytes as an array onto the stack.\nPush the next 14 bytes as an array onto the stack.\nPush the next 15 bytes as an array onto the stack.\nPush the next 16 bytes as an array onto the stack.\nPush the next 17 bytes as an array onto the stack.\nPush the next 18 bytes as an array onto the stack.\nPush the next 19 bytes as an array onto the stack.\nPush the next 2 bytes as an array onto the stack.\nPush the next 20 bytes as an array onto the stack.\nPush the next 21 bytes as an array onto the stack.\nPush the next 22 bytes as an array onto the stack.\nPush the next 23 bytes as an array onto the stack.\nPush the next 24 bytes as an array onto the stack.\nPush the next 25 bytes as an array onto the stack.\nPush the next 26 bytes as an array onto the stack.\nPush the next 27 bytes as an array onto the stack.\nPush the next 28 bytes as an array onto the stack.\nPush the next 29 bytes as an array onto the stack.\nPush the next 3 bytes as an array onto the stack.\nPush the next 30 bytes as an array onto the stack.\nPush the next 31 bytes as an array onto the stack.\nPush the next 32 bytes as an array onto the stack.\nPush the next 33 bytes as an array onto the stack.\nPush the next 34 bytes as an array onto the stack.\nPush the next 35 bytes as an array onto the stack.\nPush the next 36 bytes as an array onto the stack.\nPush the next 37 bytes as an array onto the stack.\nPush the next 38 bytes as an array onto the stack.\nPush the next 39 bytes as an array onto the stack.\nPush the next 4 bytes as an array onto the stack.\nPush the next 40 bytes as an array onto the stack.\nPush the next 41 bytes as an array onto the stack.\nPush the next 42 bytes as an array onto the stack.\nPush the next 43 bytes as an array onto the stack.\nPush the next 44 bytes as an array onto the stack.\nPush the next 45 bytes as an array onto the stack.\nPush the next 46 bytes as an array onto the stack.\nPush the next 47 bytes as an array onto the stack.\nPush the next 48 bytes as an array onto the stack.\nPush the next 49 bytes as an array onto the stack.\nPush the next 5 bytes as an array onto the stack.\nPush the next 50 bytes as an array onto the stack.\nPush the next 51 bytes as an array onto the stack.\nPush the next 52 bytes as an array onto the stack.\nPush the next 53 bytes as an array onto the stack.\nPush the next 54 bytes as an array onto the stack.\nPush the next 55 bytes as an array onto the stack.\nPush the next 56 bytes as an array onto the stack.\nPush the next 57 bytes as an array onto the stack.\nPush the next 58 bytes as an array onto the stack.\nPush the next 59 bytes as an array onto the stack.\nPush the next 6 bytes as an array onto the stack.\nPush the next 60 bytes as an array onto the stack.\nPush the next 61 bytes as an array onto the stack.\nPush the next 62 bytes as an array onto the stack.\nPush the next 63 bytes as an array onto the stack.\nPush the next 64 bytes as an array onto the stack.\nPush the next 65 bytes as an array onto the stack.\nPush the next 66 bytes as an array onto the stack.\nPush the next 67 bytes as an array onto the stack.\nPush the next 68 bytes as an array onto the stack.\nPush the next 69 bytes as an array onto the stack.\nPush the next 7 bytes as an array onto the stack.\nPush the next 70 bytes as an array onto the stack.\nPush the next 71 bytes as an array onto the stack.\nPush the next 72 bytes as an array onto the stack.\nPush the next 73 bytes as an array onto the stack.\nPush the next 74 bytes as an array onto the stack.\nPush the next 75 bytes as an array onto the stack.\nPush the next 8 bytes as an array onto the stack.\nPush the next 9 bytes as an array onto the stack.\nRead the next byte as N; push the next N bytes as an array …\nRead the next 2 bytes as N; push the next N bytes as an …\nRead the next 4 bytes as N; push the next N bytes as an …\nPush the array <code>0x01</code> onto the stack.\nPush the array <code>0x0a</code> onto the stack.\nPush the array <code>0x0b</code> onto the stack.\nPush the array <code>0x0c</code> onto the stack.\nPush the array <code>0x0d</code> onto the stack.\nPush the array <code>0x0e</code> onto the stack.\nPush the array <code>0x0f</code> onto the stack.\nPush the array <code>0x10</code> onto the stack.\nPush the array <code>0x02</code> onto the stack.\nPush the array <code>0x03</code> onto the stack.\nPush the array <code>0x04</code> onto the stack.\nPush the array <code>0x05</code> onto the stack.\nPush the array <code>0x06</code> onto the stack.\nPush the array <code>0x07</code> onto the stack.\nPush the array <code>0x08</code> onto the stack.\nPush the array <code>0x09</code> onto the stack.\nPush the array <code>0x81</code> onto the stack.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nFail the script immediately. (Must be executed.).\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nSynonym for OP_RETURN.\nFail the script unconditionally, does not even need to be …\nPop the top stack item and push its RIPEMD160 hash.\nPop the top stack element as N. Move the Nth stack element …\nRotate the top three stack items, as [top next1 next2] -&gt; […\nFail the script unconditionally, does not even need to be …\nPop the top stack item and push its SHA1 hash.\nPop the top stack item and push its SHA256 hash.\nPushes the length of the top stack item onto the stack.\nPop two stack items and push the second minus the top.\nFail the script unconditionally, does not even need to be …\nSwap the top two stack items.\nPop one element from the main stack onto the alt stack.\nCopy the top stack item to before the second item, as [top …\nSynonym for OP_RETURN.\nFail the script unconditionally, does not even need to be …\nIf the top value is zero or the stack is empty, fail; …\nFail the script unconditionally, does not even need to be …\nPop the top three items; if the top is &gt;= the second and &lt; …\nFail the script unconditionally, does not even need to be …\nAn Object which can be used to construct a script piece by …\nIterator over bytes of a script\nSome opcode expected a parameter but it was missing or …\nWays that a script might fail. Not everything is split up …\nA “parsed opcode” which allows iterating over a <code>Script</code> …\nIterator over script instructions with their positions.\nIterator over a script returning parsed opcodes.\nSomething did a non-minimal push; for more information see …\nTried to read an array off the stack as a number when it …\nSome non-push opcode.\nByte slices that can be in Bitcoin script.\nPush a bunch of data.\nOwned, growable counterpart to <code>PushBytes</code>.\nError returned on attempt to create too large <code>PushBytes</code>.\nReports information about failed conversion into <code>PushBytes</code>.\nBitcoin script slice.\nAn owned, growable script.\nA hash of Bitcoin Script bytecode.\nCan not serialize the spending transaction.\nCan not find the spent output.\nSegWit version of a Bitcoin Script bytecode hash.\nReturns script bytes\nReturns the underlying bytes.\nReturns the underlying mutbale bytes.\nExtracts mutable <code>PushBytes</code> slice\nExtracts <code>PushBytes</code> slice\nReturns the internal script\nViews the remaining script as a slice.\nViews the remaining script as a slice.\nReturns the number of bytes the buffer can contain without …\nRemove all bytes from buffer without affecting capacity.\nCreates an empty <code>PushBytes</code>.\nTry appending a slice to <code>PushBytesBuf</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHow many bytes the input had.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>Builder</code> into script bytes\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConverts the <code>Builder</code> into <code>ScriptBuf</code>.\nChecks whether the script is the empty script.\nReturns true if the buffer contains zero bytes.\nReturns true if the buffer contains zero bytes.\nReturns the length in bytes of the script.\nReturns the number of bytes in buffer.\nReturns the number of bytes in buffer.\nCreates a new empty script.\nCreates a new empty <code>PushBytesBuf</code>.\nReturns the opcode if the instruction is not a data push.\nRemove the last byte from buffer if any.\nTry pushing a single byte.\nReturns the pushed bytes if the instruction is a data push.\nAdds instructions to push an integer onto the stack.\nAdds instructions to push a public key onto the stack.\nAdds instructions to push an absolute lock time onto the …\nAdds a single opcode to the script.\nAdds instructions to push a sequence number onto the stack.\nAdds instructions to push some arbitrary data onto the …\nAdds an <code>OP_VERIFY</code> to the script or replaces the last …\nAdds instructions to push an XOnly public key onto the …\nDecodes a boolean.\nDecodes an integer in script(minimal CScriptNum) format.\nDecodes an integer in script format without non-minimal …\nRemove the byte at <code>index</code> and return it.\nReserve capacity for <code>additional_capacity</code> bytes.\nReturns the number interpretted by the script parser if it …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nRemove bytes from buffer past <code>len</code>.\nCreates a new empty <code>PushBytesBuf</code> with reserved capacity.\nThe segregated witness program as defined by BIP141.\nThe segregated witness version byte as defined by BIP141.\nEncodes an integer in script(minimal CScriptNum) format.\nWitness program error.\nThe witness program must be between 2 and 40 bytes in …\nA v0 witness program must be either of length 20 or 32.\nThe maximum byte size of a segregated witness program.\nThe minimum byte size of a segregated witness program.\nThe segregated witness program.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCannot create a witness version from non-zero data push.\nError parsing <code>WitnessVersion</code> from a string.\nString contained an invalid witness version number.\nCannot not convert OP to a witness version.\nError attempting to create a <code>WitnessVersion</code> from an …\nError attempting to create a <code>WitnessVersion</code> from an …\nUnable to parse integer from string.\nInitial version of witness program. Used for P2WPKH and …\nVersion of witness program used for Taproot P2TR outputs.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nFuture (unsupported) version of witness program.\nVersion of the segregated witness program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invalid non-witness version integer.\nError in general format.\nError attempting to do an out of bounds access on a vector.\nWeight prediction of an individual input.\nError attempting to do an out of bounds access on the …\nThe original Bitcoin transaction version (pre-BIP-68).\nA reference to a transaction output.\nError attempting to do an out of bounds access on the …\nInput weight prediction corresponding to spending of a …\nInput weight prediction corresponding to spending of a …\nInput weight prediction corresponding to spending of …\nInput weight prediction corresponding to spending of …\nInput weight prediction corresponding to spending of …\nAn error in parsing an OutPoint.\nBitcoin transaction input sequence number.\nThe second Bitcoin transaction version (post-BIP-68).\nSize exceeds max.\nBitcoin transaction.\nBitcoin transaction input.\nBitcoin transaction output.\nA bitcoin transaction hash/transaction ID.\nError in TXID part.\nThe transaction version.\nError in vout part.\nVout part is not strictly numeric without leading zeroes.\nA bitcoin witness transaction ID.\nComputes the value of an output accounting for the cost of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the prediction for a single input in <code>const</code> …\nInput weight prediction corresponding to spending of a …\nInput weight prediction corresponding to spending of …\nAttempted index access.\nList of transaction inputs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this transaction version number is …\nLength of the vector where access was attempted.\nBlock height or timestamp. Transaction cannot be included …\nComputes the prediction for a single input.\nCreates a non-standard transaction version.\nList of transaction outputs.\nPredicts the weight of a to-be-constructed transaction.\nPredicts the weight of a to-be-constructed transaction in …\nThe reference to the previous output that is being used as …\nThe script which must be satisfied for the output to be …\nThe script which pushes values on the stack which will …\nThe sequence number, which suggests to miners which of two …\nThe referenced transaction’s txid.\nThe value of the output, in satoshis.\nThe protocol version, is currently expected to be 1 or 2 …\nThe index of the referenced output in its transaction’s …\nTallies the total weight added to a transaction by an …\nWitness data: an array of byte-arrays. Note that this …\nThe factor that non-witness serialization data is …\nRepresents block weight - the weight of a transaction or …\nAn iterator returning individual witness elements.\nThe Witness is the data used to unlock bitcoin since the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nThe mainnet parameters (alias for <code>Params::MAINNET</code>).\nInvalid consensus encoding.\nData which can be encoded in a consensus-consistent way.\nError when consensus decoding from an <code>[IterReader]</code>.\nData which can be encoded in a consensus-consistent way.\nThe mainnet parameters.\nOther decoding error.\nParameters that influence chain consensus.\nThe regtest parameters.\nExtensions of <code>Read</code> to decode data as per Bitcoin consensus.\nThe signet parameters.\nThe testnet parameters.\nAttempted to decode an object from an iterator that …\nExtensions of <code>Write</code> to encode data as per Bitcoin …\nDetermines whether minimal difficulty may be used for …\nTime when BIP16 becomes active.\nBlock height at which BIP34 becomes active.\nBlock height at which BIP65 becomes active.\nBlock height at which BIP66 becomes active.\nDecode an object with a well-defined format.\nDecode <code>Self</code> from a size-limited reader.\nEncodes an object with a well-defined format.\nDeserializes an object from a vector, will error if said …\nDeserializes an object from a vector, but will not report …\nCalculates the number of blocks between difficulty …\nOutputs a boolean.\nOutputs a 16-bit signed integer.\nOutputs a 32-bit signed integer.\nOutputs a 64-bit signed integer.\nOutputs an 8-bit signed integer.\nOutputs a byte slice.\nOutputs a 16-bit unsigned integer.\nOutputs a 32-bit unsigned integer.\nOutputs a 64-bit unsigned integer.\nOutputs an 8-bit unsigned integer.\nBitcoin consensus-encodable types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum <strong>attainable</strong> target value for these params.\nNumber of blocks with the same set of rules.\nNetwork for which parameters are valid.\nCreates parameters set for the given network.    /// …\nDetermines whether retargeting is disabled for this …\nBitcoin consensus parameters.\nProof of work limit value. It contains the lowest possible …\nExpected amount of time to mine one block.\nDifficulty recalculation interval.\nReads a boolean.\nReads a 16-bit signed integer.\nReads a 32-bit signed integer.\nReads a 64-bit signed integer.\nReads an 8-bit signed integer.\nReads a byte slice.\nReads a 16-bit unsigned integer.\nReads a 32-bit unsigned integer.\nReads a 64-bit unsigned integer.\nReads an 8-bit unsigned integer.\nMinimum blocks including miner confirmation of the total …\nSerde serialization via consensus encoding\nEncodes an object into a vector.\nData and a 4-byte checksum.\nData which can be encoded in a consensus-consistent way.\nDecoding error.\nData which can be encoded in a consensus-consistent way.\nEncoding error.\nHex deserialization error.\nChecksum was invalid.\nAnd I/O error.\nMaximum size, in bytes, of a vector we are allowed to …\nVarInt was encoded in a non-minimal way.\nPurported hex string had odd length.\nTried to allocate an oversized vector.\nParsing error.\nExtensions of <code>Read</code> to decode data as per Bitcoin consensus.\nUnsupported Segwit flag.\nA variable-length unsigned integer.\nExtensions of <code>Write</code> to encode data as per Bitcoin …\nReturns the checksum of the data.\nDecode an object with a well-defined format.\nDecode <code>Self</code> from a size-limited reader.\nEncodes an object with a well-defined format.\nReturns a reference to the raw data without the checksum.\nDeserializes an object from a vector, will error if said …\nDeserialize any decodable type from a hex string, will …\nDeserializes an object from a vector, but will not report …\nOutputs a boolean.\nOutputs a 16-bit signed integer.\nOutputs a 32-bit signed integer.\nOutputs a 64-bit signed integer.\nOutputs an 8-bit signed integer.\nOutputs a byte slice.\nOutputs a 16-bit unsigned integer.\nOutputs a 32-bit unsigned integer.\nOutputs a 64-bit unsigned integer.\nOutputs an 8-bit unsigned integer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the raw data without the checksum.\nCreates a new <code>CheckedData</code> computing the checksum of given …\nReads a boolean.\nReads a 16-bit signed integer.\nReads a 32-bit signed integer.\nReads a 64-bit signed integer.\nReads an 8-bit signed integer.\nReads a byte slice.\nReads a 16-bit unsigned integer.\nReads a 32-bit unsigned integer.\nReads a 64-bit unsigned integer.\nReads an 8-bit unsigned integer.\nEncodes an object into a vector.\nEncodes an object into a hex-encoded string.\nThe invalid checksum.\nThe expected checksum.\nThe maximum capacity.\nThe capacity requested.\nThe mainnet parameters.\nParameters that influence chain consensus.\nThe regtest parameters.\nThe signet parameters.\nThe testnet parameters.\nDetermines whether minimal difficulty may be used for …\nTime when BIP16 becomes active.\nBlock height at which BIP34 becomes active.\nBlock height at which BIP65 becomes active.\nBlock height at which BIP66 becomes active.\nThe maximum <strong>attainable</strong> target value for these params.\nNumber of blocks with the same set of rules.\nNetwork for which parameters are valid.\nDetermines whether retargeting is disabled for this …\nProof of work limit value. It contains the lowest possible …\nExpected amount of time to mine one block.\nDifficulty recalculation interval.\nMinimum blocks including miner confirmation of the total …\nProvides an instance of string-to-byte decoder.\nProvides an instance of byte-to-string encoder.\nError returned when decoding fails.\nThe decoder state.\nTransforms given bytes and writes to the writer.\nThe encoder state.\nHex-encoding strategy\nError returned when decoder can’t be created.\nConverts error into a type implementing <code>serde::de::Error</code>\nHelper for <code>#[serde(with = &quot;&quot;)]</code>.\nDeserializes the value as consensus-encoded\nTransform the provided slice and write to the writer.\nWrite data in buffer (if any) to the writer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs the decoder from string.\nImplements hex encoding.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms the conversion.\nSerializes the value as consensus-encoded\nMarker for upper/lower case type-level flags (“…\nError returned when a hex string contains invalid …\nError returned when a hex string decoder can’t be …\nHex decoder state.\nHex byte encoder.\nMarker for using lower-case hex encoding.\nMarker for using upper-case hex encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nSignature was empty.\nAn ECDSA signature-related error.\nHex decoding error.\nA secp256k1 error.\nHolds signature serialized in-line (not in <code>Vec</code>).\nNon-standard sighash type.\nAn ECDSA signature with the corresponding hash type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes from slice following the standardness rules …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over bytes of the signature.\nSerializes an ECDSA signature (inner secp256k1 signature …\nSerializes an ECDSA signature (inner secp256k1 signature …\nConstructs an ECDSA Bitcoin signature for …\nThe corresponding hash type.\nThe underlying ECDSA Signature.\nSerializes an ECDSA signature (inner secp256k1 signature …\nWrites this serialized signature to a <code>writer</code>.\nHex string contains prefix.\nError when hex string contains a prefix (e.g. 0x).\nHex string is missing prefix.\nError when hex string is missing a prefix (e.g. 0x).\nError parsing integer from hex string.\nError parsing integer from string.\nError with rich context returned when a string can’t be …\nError returned when parsing integer from an supposedly …\nError returned when parsing integer from an supposedly …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA bitcoin block hash.\nFilter hash, as defined in BIP-157\nFilter header, as defined in BIP-157\nA hash of the Merkle tree branch or root for transactions.\nA bitcoin transaction hash/transaction ID.\nA hash corresponding to the witness structure commitment …\nA hash corresponding to the Merkle tree root for witness …\nA bitcoin witness transaction ID.\nLength of the hash’s internal block size, in bytes.\nThe byte array that represents the hash internally.\nFlag indicating whether user-visible serializations of …\nA hashing engine which bytes can be serialized into. It is …\nAttempted to create a hash from an invalid length slice.\nTrait which applies to hashes of all types.\nA hashing engine which bytes can be serialized into.\nA hash computed from a RFC 2104 HMAC. Parameterized by the …\nPair of underlying hash engines, used for the inner and …\nLength of the hash, in bytes.\nByte array representing the internal state of the hash …\nReturns an all zero hash.\nReturns a reference to the underlying byte array.\nAdds slicing traits implementations to a given type <code>$ty</code>\nUseful comparison functions.\nConstructs a new engine.\nConstructs a hash from the underlying byte array.\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nHashes some bytes.\nHASH160 (SHA256 then RIPEMD160) implementation.\nHashes all the byte slices retrieved from the iterator …\nCreates a new newtype around a <code>Hash</code> type.\nAdds hexadecimal formatting implementation of a trait <code>$imp</code> …\nHash-based Message Authentication Code (HMAC).\nAdd data to the hash engine.\nOutputs the midstate of the hash engine. This function …\nReturn the number of bytes already …\nRIPEMD160 implementation.\nImplements <code>Serialize</code> and <code>Deserialize</code> for a type <code>$t</code> which …\nMacros for serde trait implementations, and supporting …\nSHA1 implementation.\nSHA256 implementation.\nSHA256d implementation (double SHA256).\nSHA256t implementation (tagged SHA256).\nMacro used to define a newtype tagged hash.\nSHA384 implementation.\nSHA512 implementation.\nSHA512_256 implementation.\nSipHash 2-4 implementation.\nReturns the underlying byte array.\nCompare two slices for equality in fixed time. Panics if …\nOutput of the Bitcoin HASH160 hash function. …\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nIterator over bytes which encodes the bytes and yields hex …\nPossible case of hex.\nThe type providing <code>fmt::Display</code> implementation.\nExtension trait for types that can be displayed as hex.\nError type returned while parsing hex string.\nTrait for objects that can be deserialized from hex …\nConvenience alias for <code>HexToBytesIter&lt;HexDigitsIter&lt;&#39;a&gt;&gt;</code>.\nHex decoding error.\nHex decoding error.\nIterator yielding bytes decoded from an iterator of pairs …\nNon-hexadecimal character.\nNon-hexadecimal character.\nInvalid hex character.\nTried to parse fixed-length hash from a string with the …\nProduce lower-case chars (<code>[0-9a-f]</code>).\nPurported hex string had odd length.\nPurported hex string had odd length.\nProduce upper-case chars (<code>[0-9A-F]</code>).\nAppends hex-encoded content to an existing <code>String</code>.\nDisplay <code>Self</code> as a continuous sequence of ASCII hex chars.\nImplements a buffered encoder.\nHelpers for displaying bytes as hex strings.\nError code for the <code>hex-conservative</code> crate.\nFormat known-length array as hex.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduces an object from a hex string.\nConstructs a custom hex decoding iterator from another …\nHints how much bytes to reserve when creating a <code>String</code>.\nAdds <code>core::fmt</code> trait implementations to type <code>$ty</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns the invalid character byte.\nReturns the odd length of the input string.\nConstructs a new <code>HexToBytesIter</code> from a string slice.\nConstructs a new <code>BytesToHexIter</code> from a byte iterator.\nHex encoding and decoding.\nRe-exports of the common crate traits.\nQuick and dirty macro for parsing hex in tests.\nCreate a hex-encoded string.\nCreate a lower-hex-encoded string.\nCreate an upper-hex-encoded string.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nFormats error.\nHex-encodes bytes into the provided buffer.\nReturns the written bytes as a hex <code>str</code>.\nResets the buffer to become empty.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if no more bytes can be written into the …\nCreates an empty <code>BufEncoder</code>.\nEncodes <code>byte</code> as hex in given <code>case</code> and appends it to the …\nEncodes <code>bytes</code> as hex in given <code>case</code> and appends them to the …\nEncodes as many <code>bytes</code> as fit into the buffer as hex and …\nHow many bytes can be written to this buffer.\nThe type providing <code>fmt::Display</code> implementation.\nDisplays byte array as hex.\nDisplays byte slice as hex.\nExtension trait for types that can be displayed as hex.\nAppends hex-encoded content to an existing <code>String</code>.\nDisplay <code>Self</code> as a continuous sequence of ASCII hex chars.\nFormat known-length array as hex.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHints how much bytes to reserve when creating a <code>String</code>.\nAdds <code>core::fmt</code> trait implementations to type <code>$ty</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a hex-encoded string.\nCreate a lower-hex-encoded string.\nCreate an upper-hex-encoded string.\nHex decoding error.\nHex decoding error.\nNon-hexadecimal character.\nNon-hexadecimal character.\nInvalid hex character.\nTried to parse fixed-length hash from a string with the …\nTried to parse fixed-length hash from a string with the …\nPurported hex string had odd length.\nPurported hex string had odd length.\nThe expected length.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe invalid length.\nError type returned while parsing hex string.\nTrait for objects that can be deserialized from hex …\nHex decoding error.\nHex decoding error.\nNon-hexadecimal character.\nNon-hexadecimal character.\nTried to parse fixed-length hash from a string with the …\nPurported hex string had odd length.\nProduces an object from a hex string.\nThe type providing <code>fmt::Display</code> implementation.\nExtension trait for types that can be displayed as hex.\nError type returned while parsing hex string.\nTrait for objects that can be deserialized from hex …\nAppends hex-encoded content to an existing <code>String</code>.\nDisplay <code>Self</code> as a continuous sequence of ASCII hex chars.\nProduces an object from a hex string.\nHints how much bytes to reserve when creating a <code>String</code>.\nCreate a hex-encoded string.\nCreate a lower-hex-encoded string.\nCreate an upper-hex-encoded string.\nA hash computed from a RFC 2104 HMAC. Parameterized by the …\nPair of underlying hash engines, used for the inner and …\nPair of underlying hash midstates which represent the …\nReturns the argument unchanged.\nMidstate of the inner hash engine\nCalls <code>U::from(self)</code>.\nMidstate of the outer hash engine\nOutput of the RIPEMD160 hash function.\nEngine to compute RIPEMD160 hash function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <strong>data structure</strong> that can be deserialized from any data …\nA <strong>data format</strong> that can deserialize any data structure …\nThe error type that can be returned if some error occurs …\nThe error type when some error occurs during serialization.\nThe output type produced by this <code>Serializer</code> during …\nA <strong>data structure</strong> that can be serialized into any data …\nType returned from <code>serialize_map</code> for serializing the …\nType returned from <code>serialize_seq</code> for serializing the …\nType returned from <code>serialize_struct</code> for serializing the …\nType returned from <code>serialize_struct_variant</code> for …\nType returned from <code>serialize_tuple</code> for serializing the …\nType returned from <code>serialize_tuple_struct</code> for serializing …\nType returned from <code>serialize_tuple_variant</code> for serializing …\nA <strong>data format</strong> that can serialize any data structure …\nCollect an iterator as a map.\nCollect an iterator as a sequence.\nSerialize a string produced by an implementation of <code>Display</code>…\nGeneric data structure deserialization framework.\nDeserialize this value from the given Serde deserializer.\nRequire the <code>Deserializer</code> to figure out how to drive the …\nHint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a <code>char</code> value.\nHint that the <code>Deserialize</code> type is expecting an enum value …\nHint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.\nHint that the <code>Deserialize</code> type is expecting the name of a …\nHint that the <code>Deserialize</code> type needs to deserialize a …\nHint that the <code>Deserialize</code> type is expecting a map of …\nHint that the <code>Deserialize</code> type is expecting a newtype …\nHint that the <code>Deserialize</code> type is expecting an optional …\nHint that the <code>Deserialize</code> type is expecting a sequence of …\nHint that the <code>Deserialize</code> type is expecting a string value …\nHint that the <code>Deserialize</code> type is expecting a string value …\nHint that the <code>Deserialize</code> type is expecting a struct with …\nHint that the <code>Deserialize</code> type is expecting a sequence of …\nHint that the <code>Deserialize</code> type is expecting a tuple struct …\nHint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.\nHint that the <code>Deserialize</code> type is expecting a unit value.\nHint that the <code>Deserialize</code> type is expecting a unit struct …\nHelper macro when implementing the <code>Deserializer</code> part of a …\nDetermine whether <code>Deserialize</code> implementations should …\nDetermine whether <code>Serialize</code> implementations should …\nGeneric data structure serialization framework.\nSerialize this value into the given Serde serializer.\nSerialize a <code>bool</code> value.\nSerialize a chunk of raw byte data.\nSerialize a character.\nSerialize an <code>f32</code> value.\nSerialize an <code>f64</code> value.\nSerialize an <code>i128</code> value.\nSerialize an <code>i16</code> value.\nSerialize an <code>i32</code> value.\nSerialize an <code>i64</code> value.\nSerialize an <code>i8</code> value.\nBegin to serialize a map. This call must be followed by …\nSerialize a newtype struct like <code>struct Millimeters(u8)</code>.\nSerialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.\nSerialize a <code>None</code> value.\nBegin to serialize a variably sized sequence. This call …\nSerialize a <code>Some(T)</code> value.\nSerialize a <code>&amp;str</code>.\nBegin to serialize a struct like …\nBegin to serialize a struct variant like <code>E::S</code> in …\nBegin to serialize a statically sized sequence whose …\nBegin to serialize a tuple struct like …\nBegin to serialize a tuple variant like <code>E::T</code> in …\nSerialize a <code>u128</code> value.\nSerialize a <code>u16</code> value.\nSerialize a <code>u32</code> value.\nSerialize a <code>u64</code> value.\nSerialize a <code>u8</code> value.\nSerialize a <code>()</code> value.\nSerialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.\nSerialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.\nThe input contained a boolean value that was not expected.\nThe input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …\nThe input contained a <code>char</code> that was not expected.\nA <strong>data structure</strong> that can be deserialized from any data …\nA data structure that can be deserialized without …\n<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …\nA <strong>data format</strong> that can deserialize any data structure …\nThe type of the deserializer being converted into.\nThe input contained an enum that was not expected.\nProvides a <code>Visitor</code> access to the data of an enum in the …\nThe <code>Error</code> trait allows <code>Deserialize</code> implementations to …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\n<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …\nThe input contained a floating point <code>f32</code> or <code>f64</code> that was …\nAn efficient way of discarding data from a deserializer.\nConverts an existing value into a <code>Deserializer</code> from which …\nThe input contained a map that was not expected.\nProvides a <code>Visitor</code> access to each entry of a map in the …\nThe input contained a newtype struct that was not expected.\nThe input contained a newtype variant that was not …\nThe input contained an <code>Option&lt;T&gt;</code> that was not expected.\nA message stating what uncategorized thing the input …\nThe input contained a sequence that was not expected.\nProvides a <code>Visitor</code> access to each element of a sequence in …\nThe input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …\n<code>Error</code> is a trait representing the basic expectations for …\nThe input contained a <code>&amp;str</code> or <code>String</code> that was not expected.\nThe input contained a struct variant that was not expected.\nThe input contained a tuple variant that was not expected.\n<code>Unexpected</code> represents an unexpected invocation of any one …\nThe input contained a unit <code>()</code> that was not expected.\nThe input contained a unit variant that was not expected.\nThe input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…\nThe type produced by using this seed.\nThe value produced by this visitor.\nThe <code>Visitor</code> that will be used to deserialize the content …\n<code>VariantAccess</code> is a visitor that is created by the …\nThis trait represents a visitor that walks through a …\nRaised when there is general error when deserializing a …\nEquivalent to the more common <code>Deserialize::deserialize</code> …\nDeserialize this value from the given Serde deserializer.\nRequire the <code>Deserializer</code> to figure out how to drive the …\nHint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a <code>char</code> value.\nHint that the <code>Deserialize</code> type is expecting an enum value …\nHint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.\nHint that the <code>Deserialize</code> type is expecting the name of a …\nHint that the <code>Deserialize</code> type needs to deserialize a …\nHint that the <code>Deserialize</code> type is expecting a map of …\nHint that the <code>Deserialize</code> type is expecting a newtype …\nHint that the <code>Deserialize</code> type is expecting an optional …\nHint that the <code>Deserialize</code> type is expecting a sequence of …\nHint that the <code>Deserialize</code> type is expecting a string value …\nHint that the <code>Deserialize</code> type is expecting a string value …")